<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>syls blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on syls blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FLARE-On 2014 writeups</title>
      <link>http://localhost:1313/writeups/the-flare-on-2014/</link>
      <pubDate>Tue, 06 May 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/the-flare-on-2014/</guid>
      <description>Overview I&amp;rsquo;ve began to learn reverse engineering, and by the end of this year I aim to be decent at it, I will start with the Flare On and bunch of other challenges.&#xA;C1 Its a Windows Form with Bob Ross on it.&#xA;a&#xA;I&amp;rsquo;ve noticed the title of the Program Form 1 and thought that this is .NET binary, I loaded it into dnSpy and explored it.&#xA;a&#xA;We are having a hidden resource called dat_secret which are random bytes, then we have a decryption function that looks like this:</description>
    </item>
    <item>
      <title>Tracking Down the Bulgarian Marketplace Scams</title>
      <link>http://localhost:1313/posts/2024-19-12-investigation-on-scams/</link>
      <pubDate>Thu, 19 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024-19-12-investigation-on-scams/</guid>
      <description>Introduction This is rather an unusual article that I would be publishing. I usually don&amp;rsquo;t do threat hunting or any amount of hunting outside work, but this one got personal.&#xA;This is probably a good place to state that this is not related to my work activities and that I am doing this of my own accord!&#xA;Research Let&amp;rsquo;s start from the beginning. A little while ago, I was contacted by a person in a marketplace for an item that I was selling.</description>
    </item>
    <item>
      <title>zer0pts CTF 2023 - GitFile Explorer</title>
      <link>http://localhost:1313/writeups/zer0pts-ctf-2022---gitfile-explorer/</link>
      <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/zer0pts-ctf-2022---gitfile-explorer/</guid>
      <description>This is a single PHP file challenge that contains a &amp;ldquo;Git File Explorer&amp;rdquo;, it basically fetches a file from github/gitlab/bitbucket that you specify in the form. The challenge here is to read /flag at the root.&#xA;I went through the code to see how we can possibly read the flag, and the only way it seem to be out of this snippet:&#xA;if ($service) { $url = craft_url($service, $owner, $repo, $branch, $file); if (preg_match(&amp;#34;/^http.</description>
    </item>
    <item>
      <title>HTB Challenge - Gunship</title>
      <link>http://localhost:1313/writeups/htb-challenge---gunship/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/htb-challenge---gunship/</guid>
      <description>This is a prototype pollution challenge as I realized by having pinned packages such as &amp;quot;flat&amp;quot;: &amp;quot;5.0.0&amp;quot;, we then can see the vulnerability related to it which is this.&#xA;So the challenge starts with a simple submit input that takes an artist name and sends it to the backend.&#xA;router.post(&amp;#39;/api/submit&amp;#39;, (req, res) =&amp;gt; { const { artist } = unflatten(req.body); if (artist.name.includes(&amp;#39;Haigh&amp;#39;) || artist.name.includes(&amp;#39;Westaway&amp;#39;) || artist.name.includes(&amp;#39;Gingell&amp;#39;)) { return res.json({ &amp;#39;response&amp;#39;: pug.</description>
    </item>
    <item>
      <title>4T$ CTF 2024 - Homelab ? More like Pwnlab !</title>
      <link>http://localhost:1313/writeups/4t-ctf-2024---homelab-more-like-pwnlab/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/4t-ctf-2024---homelab-more-like-pwnlab/</guid>
      <description>We would start with 2 things:&#xA;Web SSH Access (through the browser) Application with simple upload/download functionality I found that the application does not enforce the paths for uploading and downloading and you can upload/download whatever file you want, you just have to URL encode it like so:&#xA;..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd I&amp;rsquo;ve also realized that this application is running in a Docker container, by going through the web SSH, I can see the docker compose file in /home/admin/docker-compose.</description>
    </item>
    <item>
      <title>4T$ CTF 2024 - My Sky Blog</title>
      <link>http://localhost:1313/writeups/4t-ctf-2024---my-sky-blog/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/4t-ctf-2024---my-sky-blog/</guid>
      <description>We start with a simple blog website. We can create an account and login, upon logging in we are greeted with a random greeting and we have couple of options:&#xA;Create a post Change Username/Password After few black-box testing here for XSS, I&amp;rsquo;ve found XSS on the /profile because the username wasn&amp;rsquo;t escaped, but that&amp;rsquo;s not the main vulnerability. I&amp;rsquo;ve downloaded the source code and I saw that its a Go project and the name of the module is module ssti which hints for SSTI (Server Side Template Injection).</description>
    </item>
    <item>
      <title>BlueHensCTF 2024 - Corkscrew</title>
      <link>http://localhost:1313/writeups/bluehensctf-2024---corkscrew/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/bluehensctf-2024---corkscrew/</guid>
      <description>We start with a few hints and a string that we should rearrange. The hints are that this consists of a old school crypto and the string is Us_lnt10ns}1443{FTCDqsysp0srrr4up_t1.&#xA;After consulting with my best friend chatgpt, it hinted me that this could be a Spiral-Like cipher. So it goes like this:&#xA;The text is 36 chars long and we can create a square shape out of it.&#xA;U s _ l n t 1 0 n s } 1 4 4 3 { F T C D q s y s p 0 s r r r 4 u p _ t 1 Then we simply transpose it clockwise in a spiral way so that becomes</description>
    </item>
    <item>
      <title>BlueHensCTF 2024 - Firefun 3</title>
      <link>http://localhost:1313/writeups/bluehensctf-2024---firefun-3/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/bluehensctf-2024---firefun-3/</guid>
      <description>We would start with a simple landing page that has nothing in it besides some HTML, the wappalyzer tells us that this is a Firebase application.&#xA;In that case we can try to fuzz some firebase specific things, which will lead us to the configuration file:&#xA;/__/firebase/init.json Now we can quickly craft some enumeration of that application, HOWEVER I&amp;rsquo;ve tried with various tools such as:&#xA;firepwn baserunner But for whatever reason they did not work, so I&amp;rsquo;ve crafted my own code to do the enumeration in NodeJS.</description>
    </item>
    <item>
      <title>zer0pts CTF 2023 - Neko Note</title>
      <link>http://localhost:1313/writeups/zer0pts-ctf-2023---neko-note/</link>
      <pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/zer0pts-ctf-2023---neko-note/</guid>
      <description>I spent way too much time on this challenge but it was a really good one. We would start with a simple web page that has a basic form that you ca use to create notes. The form consists of 3 things, title, body and &amp;hellip;a password?! The password part was odd but lets continue.. You can also specify a &amp;ldquo;link&amp;rdquo; to other note via the square brackets like [6f16cd75-c50d-4ea2-b845-a085ff982a57] that UUID would be the identifier of the other note that you wan to link, and the interesting part here is that it expands its title, so if you put that UUID in your body, whenever you request the note you would get a link with the note&amp;rsquo;s title.</description>
    </item>
    <item>
      <title>AlpacaHack Round 2 (Web) - CaaS (Cow as a Service)</title>
      <link>http://localhost:1313/writeups/alpacahackr2web-caas/</link>
      <pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/alpacahackr2web-caas/</guid>
      <description>Overview I&amp;rsquo;ve initially thought that this is a JavaScript command injection challenge, since that we have the flag located at the root and we have a binary that is being executed (/usr/games/cowsay). I began to read the documentation of google/zx, but after a while I didn&amp;rsquo;t find anything that could lead to command injection.&#xA;Then I&amp;rsquo;ve started to explore the binary itself /usr/games/cowsay, I also setup a verbose output for ZX as I&amp;rsquo;ve read the documentation.</description>
    </item>
    <item>
      <title>AlpacaHack Round 2 (Web) - Pico Note 1</title>
      <link>http://localhost:1313/writeups/alpacahackr2web-pico-note-1/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/writeups/alpacahackr2web-pico-note-1/</guid>
      <description>Overview In this challenge we need to provide a certain title/content to the main application in order to trigger XSS. However it is quite tricky since that we have a CSP Header with a nonce =&amp;gt; content-security-policy: script-src &#39;nonce-&amp;lt;random_shit&amp;gt;&#39;; and in order to trigger the XSS we would send an URL to a bot.&#xA;So let&amp;rsquo;s explore the code.&#xA;Code Analysis We won&amp;rsquo;t check the bot, since it is quite straightforward.</description>
    </item>
    <item>
      <title>Static Analysis Research - Windows PE</title>
      <link>http://localhost:1313/posts/2023-01-06-static-analysis-research-p1/</link>
      <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2023-01-06-static-analysis-research-p1/</guid>
      <description>Overview Recently, I decided do delve a little bit more into static analysis, something beyond just running strings on a binary and getting the ASCII characters that are printable. I decided to take a deep look at how FLOSS is working and possibly recreate some of its functionality in my own tool.&#xA;Before reading further, I want you to know that this post is about research I did on static analysis.</description>
    </item>
    <item>
      <title>Using DNS as C2 Communication - Evasive Techniques (Part 3)</title>
      <link>http://localhost:1313/posts/2022-10-26-dns-c2-communcation/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-10-26-dns-c2-communcation/</guid>
      <description>Overview Following my last post about some evasion techniques that the Symbiote uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control C2 server.&#xA;Upon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of A Resource Records (RR) that it sends through the UDP.</description>
    </item>
    <item>
      <title>Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)</title>
      <link>http://localhost:1313/posts/2022-10-04-dynamic-linker-hijacking-experiments-2/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-10-04-dynamic-linker-hijacking-experiments-2/</guid>
      <description>Journey Post This post is a something that I call &amp;ldquo;journey post&amp;rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like &amp;lt;journey&amp;gt; so that you can skip it if you are in a hurry.&#xA;Overview In the last post I&amp;rsquo;ve described how I hid a file from all the sys calls that are using readdir.</description>
    </item>
    <item>
      <title>Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)</title>
      <link>http://localhost:1313/posts/2022-10-02-dynamic-linker-hijacking-experiments/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-10-02-dynamic-linker-hijacking-experiments/</guid>
      <description>Overview Recently I heard about a new malware called Symbiote, which the researches are calling the &amp;ldquo;Nearly-Impossible-to-Detect Linux Threat&amp;rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I&amp;rsquo;ve started to research it.&#xA;I highly advise you to read through these articles first before we begin with the actual post:&#xA;Hijack Execution Flow: Dynamic Linker Hijacking What Is the LD_PRELOAD?</description>
    </item>
    <item>
      <title>Create Plugin Architecture With Python</title>
      <link>http://localhost:1313/posts/2022-05-23-create-plugin-architecture-with-python/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-05-23-create-plugin-architecture-with-python/</guid>
      <description>There are some use-cases where a plugin architecture is needed, I call this &amp;ldquo;code&amp;rdquo; plugins but it is quite possible that there is already a word for that. The idea is to &amp;rsquo;load&amp;rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I&amp;rsquo;ve created 2 solutions for that matter one that is using the __subclasses__ dunder method and one using a decorator.</description>
    </item>
    <item>
      <title>Simple Fishing Bot for World of Warcraft</title>
      <link>http://localhost:1313/posts/2022-05-22-simple-fishing-bot/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-05-22-simple-fishing-bot/</guid>
      <description>This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.&#xA;Repository: https://github.com/syrull/simple-fishing-bot&#xA;Overview The bot has about ~99% success rate, there are some extremely rare cases where the bot won&amp;rsquo;t catch it and I will explain why later. The method that the bot is using, should work in almost any fishing scenario in the game, I would personally avoid crowded places.</description>
    </item>
    <item>
      <title>STIX/TAXII - Complete Knowledge</title>
      <link>http://localhost:1313/posts/2022-04-10-stix-taxii-complete-knowledge/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2022-04-10-stix-taxii-complete-knowledge/</guid>
      <description>Introduction STIX What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).&#xA;Here is a very simple representation of STIX Objects in a graph. Explanation of the example&#xA;The data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX.</description>
    </item>
    <item>
      <title>Installing Private Packages in Docker Image - Notes</title>
      <link>http://localhost:1313/posts/2021-05-27-installing-private-packages-in-docker-image-notes/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2021-05-27-installing-private-packages-in-docker-image-notes/</guid>
      <description>Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.&#xA;Using SSH Forwarding Exporting the $SSH_AUTH_SOCK environment variable in the image.&#xA;$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash Or in the environment section of a compose file.&#xA;environment: SSH_AUTH_SOCK: $SSH_AUTH_SOCK Eventual Issues with that Installing ssh in the container Adding entries to /etc/ssh/ssh_known_hosts Caveats Traces of ssh keys inside the image References https://gist.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>About I am a offensive security consultant and CTF player with ADMinions. Sometimes I like to annoy myself with DotA2 or Counter-Strike.&#xA;If you want to contact me:&#xA;Discord: syl5x LinkedIn Email: sylsec[ат]pm.me </description>
    </item>
  </channel>
</rss>
