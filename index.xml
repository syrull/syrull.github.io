<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>0x73796C31</title><link>https://sy1.sh/</link><description>Recent content on 0x73796C31</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Apr 2023 19:42:27 +0300</lastBuildDate><atom:link href="https://sy1.sh/index.xml" rel="self" type="application/rss+xml"/><item><title>Hack The Box - MetaTwo [Easy]</title><link>https://sy1.sh/writeups/htb-metatwo/</link><pubDate>Fri, 21 Apr 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-metatwo/</guid><description>Starting out with rustscan
Open 10.10.11.186:21 Open 10.10.11.186:22 Open 10.10.11.186:80 [~] Starting Script(s) [~] Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-21 16:34 EEST Initiating Ping Scan at 16:34 Scanning 10.10.11.186 [2 ports] Completed Ping Scan at 16:34, 0.05s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 16:34 Completed Parallel DNS resolution of 1 host. at 16:34, 0.23s elapsed DNS resolution of 1 IPs took 0.23s. Mode: Async [#: 1, OK: 0, NX: 1, DR: 0, SF: 0, TR: 1, CN: 0] Initiating Connect Scan at 16:34 Scanning 10.</description></item><item><title>Proving Grounds (OSCP) - Sar</title><link>https://sy1.sh/writeups/pg-sar/</link><pubDate>Sat, 15 Apr 2023 11:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/pg-sar/</guid><description>This was a fairly easy machine, I began with a nmap scan:
PORT STATE SERVICE 22/tcp open ssh 80/tcp open http On port 80 there was a blank website, so I fuzz it and found bunch of files.
http://192.168.210.35/robots.txt -&amp;gt; http://192.168.210.35/sar2HTML/ http://192.168.210.35/phpinfo.php Using the phpinfo I have enumerated the versions
sar2html Ver 3.2.1 &amp;lt;-- Vulnerable Linux sar 5.0.0-23-generic #24~18.04.1-Ubuntu SMP Mon Jul 29 16:12:28 UTC 2019 x86_64 Apache/2.4.29 PHP 7.1.32-1+ubuntu18.04.1+deb.sury.org+1 exif 7.</description></item><item><title>Proving Grounds (OSCP) - Photographer</title><link>https://sy1.sh/writeups/pg-photographer/</link><pubDate>Sat, 15 Apr 2023 10:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/pg-photographer/</guid><description>I&amp;rsquo;ve started my OSCP journey a while ago, and I wanted to try the PG machines, this is the first one that I&amp;rsquo;ve tried. The machine is fairly straightforward and it&amp;rsquo;s labeled easy.
I&amp;rsquo;ve started with a simple nmap scan, which hinted that this Linux machine is part of an Active Directory.
PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 414daa1886948e88a74c6b426076f14f (RSA) | 256 4da3d07a8f64ef82452d011318b7e013 (ECDSA) |_ 256 1a017a4fcf9585bf31a14f1587ab94e2 (ED25519) 80/tcp open http Apache httpd 2.</description></item><item><title>Hack The Box - Encoding [Medium]</title><link>https://sy1.sh/writeups/htb-encoding/</link><pubDate>Fri, 17 Feb 2023 02:01:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-encoding/</guid><description>This machine took me a couple of days due to its complexity and some minor stuff that were a hassle to get right.
You will find the following vulnerabilities: - Local File Inclusion - Command Injection or RCE
Flag 1 I started by looking through the website to get some idea of its functionality. I saw that this is some sort of converter of data, like binary to hex and so on.</description></item><item><title>Hack The Box - Vessel [Hard]</title><link>https://sy1.sh/writeups/htb-vessel/</link><pubDate>Sun, 12 Feb 2023 10:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-vessel/</guid><description>Overview Since it becomes very time consuming doing this in a video this write-up is going to be in a text.
The machine is labeled hard with a good reason, most of the tasks are time consuming but there are some interesting vulnerabilities like CVE-2022-0811 and CVE-2022-24637.
On top of these we have NoSQL Injection and some PE reverse engineering.
Write-up Flag 1 First I began enumerating the whole website with ffuf.</description></item><item><title>Hack The Box - Investigation [Medium]</title><link>https://sy1.sh/writeups/htb-investigation/</link><pubDate>Fri, 10 Feb 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-investigation/</guid><description>This box consist of several vulnerabilities:
Command Injection - Used a vulnerability in exiftool that allowed me to run arbitrary code. Leaked Credentials - Then we found the .msg file which contained an event logs from a Windows machine where we found the credentials for user smorton. I wasted a lot of time an effort to figure that one out, so don&amp;rsquo;t be discouraged when you can&amp;rsquo;t find it in the first 5 mins.</description></item><item><title>Hack The Box - Broscience [Medium]</title><link>https://sy1.sh/writeups/htb-broscience/</link><pubDate>Thu, 09 Feb 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-broscience/</guid><description>Short Overview The video consist of my process of enumeration and overall hacking the machine, please use this as a walkthrough.
This box consist of several vulnerabilities:
Local File Inclusion/Path traversal - The query string path= in the img.php file is vulnerable to that, with that we can download the site map that I&amp;rsquo;ve discovered using Burp Deserialization / PHP Object Injection - I saw that in the utils.php file, and I&amp;rsquo;ve prepared a payload for the AvatarInterface since this is the class that is using magic methods, and it has the file_get_contents function that we are going to use to pull the PHP reverse shell.</description></item><item><title>Malware Analysis - CB Challenges</title><link>https://sy1.sh/writeups/malware-analysis-2022cb-challenges/</link><pubDate>Thu, 09 Feb 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/malware-analysis-2022cb-challenges/</guid><description>Overview Putting up my analysis of some malware samples.
Samples Report 5dee718c386934d2494ee5ddde79d27a69c1687493b6eb40d0db47f730ab76fb View 6fd9909f8ec811577351402832665d4a6b6e5399422b8cac79dd98532ac48913 View 19a3dd8024bb4677261ecd8bb85e8a4c53d15870e4b9d2203e933a00b7eecb85 View 280d2ceb081745412127a018055234f5a72935a77aa102aef7924ba21f43d4ee View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd I eventually found the XOR cipher key, unfortunately my bruteforce script wasn&amp;rsquo;t able to recover the url but in the end the string wasn&amp;rsquo;t exactly an url. The key was en-CB and the decoded string is c2.2go.ma1w.are_eT!/eab/+CE%&amp;amp;6d</description></item><item><title>Static Analysis Research - Windows PE</title><link>https://sy1.sh/posts/static-analysis-research-p1/</link><pubDate>Fri, 06 Jan 2023 09:44:47 +0300</pubDate><guid>https://sy1.sh/posts/static-analysis-research-p1/</guid><description>Overview Recently, I decided do delve a little bit more into static analysis, something beyond just running strings on a binary and getting the ASCII characters that are printable. I decided to take a deep look at how FLOSS is working and possibly recreate some of its functionality in my own tool.
Before reading further, I want you to know that this post is about research I did on static analysis.</description></item><item><title>Using DNS as C2 Communication - Evasive Techniques (Part 3)</title><link>https://sy1.sh/posts/dns-c2-communcation/</link><pubDate>Wed, 26 Oct 2022 20:45:03 +0300</pubDate><guid>https://sy1.sh/posts/dns-c2-communcation/</guid><description>Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) (this one) Overview Following my last post about some evasion techniques that the Symbiote uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control C2 server.
Upon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of A Resource Records (RR) that it sends through the UDP.</description></item><item><title>Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)</title><link>https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/</link><pubDate>Tue, 04 Oct 2022 21:45:03 +0300</pubDate><guid>https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/</guid><description>Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) (this one) Using DNS as C2 Communication - Evasive Techniques (Part 3) Journey Post This post is a something that I call &amp;ldquo;journey post&amp;rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like &amp;lt;journey&amp;gt; so that you can skip it if you are in a hurry.</description></item><item><title>Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)</title><link>https://sy1.sh/posts/dynamic-linker-hijacking-experiments/</link><pubDate>Sun, 02 Oct 2022 21:45:03 +0300</pubDate><guid>https://sy1.sh/posts/dynamic-linker-hijacking-experiments/</guid><description>Series (this one) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) Using DNS as C2 Communication - Evasive Techniques (Part 3) Overview Recently I heard about a new malware called Symbiote, which the researches are calling the &amp;ldquo;Nearly-Impossible-to-Detect Linux Threat&amp;rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I&amp;rsquo;ve started to research it.
I highly advise you to read through these articles first before we begin with the actual post:</description></item><item><title>LegionTD2 Go SDK (v0.2.0)</title><link>https://sy1.sh/posts/legiontd2-sdk/</link><pubDate>Tue, 23 Aug 2022 21:44:47 +0300</pubDate><guid>https://sy1.sh/posts/legiontd2-sdk/</guid><description>Recently I&amp;rsquo;ve been fascinated with a game called LegionTD2, this is a newly created game that I&amp;rsquo;ve been playing as a map ever since Warcraft 3, it is tactical multiplayer tower-defense(td). The game is based on predictions and timings, if you play your cards right (or in the context of the game: sends/workers/units) you will prevail over the enemy team. Read more about it here.
LegionTD SDK I&amp;rsquo;ve doing stuff in Go in my free time (mainly code challenges) for a while now and I&amp;rsquo;ve decided that I should spend some time creating something useful for myself such as creating tools that would help me get better at the game.</description></item><item><title>Create Plugin Architecture With Python</title><link>https://sy1.sh/posts/create-plugin-architecture-with-python/</link><pubDate>Mon, 23 May 2022 21:44:27 +0300</pubDate><guid>https://sy1.sh/posts/create-plugin-architecture-with-python/</guid><description>There are some use-cases where a plugin architecture is needed, I call this &amp;ldquo;code&amp;rdquo; plugins but it is quite possible that there is already a word for that. The idea is to &amp;rsquo;load&amp;rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I&amp;rsquo;ve created 2 solutions for that matter one that is using the __subclasses__ dunder method and one using a decorator.</description></item><item><title>Simple Fishing Bot for World of Warcraft</title><link>https://sy1.sh/posts/simple-fishing-bot/</link><pubDate>Sun, 22 May 2022 21:37:03 +0300</pubDate><guid>https://sy1.sh/posts/simple-fishing-bot/</guid><description>This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.
Repository: https://github.com/syrull/simple-fishing-bot
Overview The bot has about ~99% success rate, there are some extremely rare cases where the bot won&amp;rsquo;t catch it and I will explain why later. The method that the bot is using, should work in almost any fishing scenario in the game, I would personally avoid crowded places.</description></item><item><title>STIX/TAXII - Complete Knowledge</title><link>https://sy1.sh/posts/stix-taxii-complete-knowledge/</link><pubDate>Sun, 10 Apr 2022 21:42:39 +0300</pubDate><guid>https://sy1.sh/posts/stix-taxii-complete-knowledge/</guid><description>Introduction STIX What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).
Here is a very simple representation of STIX Objects in a graph. Explanation of the example
The data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX.</description></item><item><title>Installing Private Packages in Docker Image - Notes</title><link>https://sy1.sh/posts/installing-private-packages-in-docker-image-notes/</link><pubDate>Thu, 27 May 2021 21:44:47 +0300</pubDate><guid>https://sy1.sh/posts/installing-private-packages-in-docker-image-notes/</guid><description>Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.
Using SSH Forwarding Exporting the $SSH_AUTH_SOCK environment variable in the image.
$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash Or in the environment section of a compose file.
environment: SSH_AUTH_SOCK: $SSH_AUTH_SOCK Eventual Issues with that Installing ssh in the container Adding entries to /etc/ssh/ssh_known_hosts Caveats Traces of ssh keys inside the image References https://gist.</description></item><item><title>About</title><link>https://sy1.sh/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sy1.sh/cv/</guid><description>Download PDF</description></item></channel></rss>