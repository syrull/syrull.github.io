<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Writeups on 0x73796C31</title><link>https://sy1.sh/writeups/</link><description>Recent content in Writeups on 0x73796C31</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Feb 2023 19:42:27 +0300</lastBuildDate><atom:link href="https://sy1.sh/writeups/index.xml" rel="self" type="application/rss+xml"/><item><title>Hack The Box - Broscience [Medium]</title><link>https://sy1.sh/writeups/htb-broscience/</link><pubDate>Thu, 09 Feb 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-broscience/</guid><description>Short Overview The video consist of my process of enumeration and overall hacking the machine, please use this as a walkthrough.
This box consist of several vulnerabilities:
Local File Inclusion/Path traversal - The query string path= in the img.php file is vulnerable to that, with that we can download the site map that I&amp;rsquo;ve discovered using Burp Deserialization / PHP Object Injection - I saw that in the utils.php file, and I&amp;rsquo;ve prepared a payload for the AvatarInterface since this is the class that is using magic methods, and it has the file_get_contents function that we are going to use to pull the PHP reverse shell.</description></item><item><title>Hack The Box - Stocker [Easy]</title><link>https://sy1.sh/writeups/htb-stocker/</link><pubDate>Thu, 09 Feb 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/htb-stocker/</guid><description>Short Overview This box consist of several vulnerabilities:
NoSQL Injection - Specifically the part with sending the payload using JSON, we use this vulnerability to bypass the login process. Server Side Template Injection - We could directly use HTML and then inject an iframe which src is set to /etc/passwd and after that we traverse the application itself to find the MongoDB user/password, and we used those to connect successfully to the machine using the password provided there.</description></item><item><title>Malware Analysis - CB Challenges</title><link>https://sy1.sh/writeups/malware-analysis-2022cb-challenges/</link><pubDate>Thu, 09 Feb 2023 19:42:27 +0300</pubDate><guid>https://sy1.sh/writeups/malware-analysis-2022cb-challenges/</guid><description>Overview Putting up my analysis of some malware samples.
Samples Report 5dee718c386934d2494ee5ddde79d27a69c1687493b6eb40d0db47f730ab76fb View 6fd9909f8ec811577351402832665d4a6b6e5399422b8cac79dd98532ac48913 View 19a3dd8024bb4677261ecd8bb85e8a4c53d15870e4b9d2203e933a00b7eecb85 View 280d2ceb081745412127a018055234f5a72935a77aa102aef7924ba21f43d4ee View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd I eventually found the XOR cipher key, unfortunately my bruteforce script wasn&amp;rsquo;t able to recover the url but in the end the string wasn&amp;rsquo;t exactly an url. The key was en-CB and the decoded string is c2.2go.ma1w.are_eT!/eab/+CE%&amp;amp;6d</description></item></channel></rss>