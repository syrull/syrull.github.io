---
// Theme toggle component
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle dark mode">
	<svg
		class="sun-icon"
		xmlns="http://www.w3.org/2000/svg"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		fill="none"
		stroke="currentColor"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
	>
		<circle cx="12" cy="12" r="5"></circle>
		<line x1="12" y1="1" x2="12" y2="3"></line>
		<line x1="12" y1="21" x2="12" y2="23"></line>
		<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
		<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
		<line x1="1" y1="12" x2="3" y2="12"></line>
		<line x1="21" y1="12" x2="23" y2="12"></line>
		<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
		<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
	</svg>
	<svg
		class="moon-icon"
		xmlns="http://www.w3.org/2000/svg"
		width="24"
		height="24"
		viewBox="0 0 24 24"
		fill="none"
		stroke="currentColor"
		stroke-width="2"
		stroke-linecap="round"
		stroke-linejoin="round"
	>
		<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
	</svg>
</button>

<style>
	.theme-toggle {
		position: relative;
		width: 40px;
		height: 40px;
		padding: 0;
		border: 1px solid rgb(var(--border-color));
		border-radius: 6px;
		background-color: rgb(var(--bg-secondary));
		color: rgb(var(--text-primary));
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.2s ease;
	}

	.theme-toggle:hover {
		background-color: rgb(var(--bg-primary));
		border-color: rgb(var(--accent));
		color: rgb(var(--accent));
	}

	.theme-toggle svg {
		width: 20px;
		height: 20px;
		position: absolute;
		opacity: 1;
		transition: opacity 0.3s ease, transform 0.3s ease;
	}

	.sun-icon {
		opacity: 1;
		transform: rotate(0deg);
	}

	.moon-icon {
		opacity: 0;
		transform: rotate(-180deg);
	}

	html[data-theme='dark'] .sun-icon {
		opacity: 0;
		transform: rotate(180deg);
	}

	html[data-theme='dark'] .moon-icon {
		opacity: 1;
		transform: rotate(0deg);
	}
</style>

<script is:inline>
	(function() {
		const themeToggle = document.getElementById('theme-toggle');

		function initTheme() {
			// Get saved theme or default to light
			const savedTheme = localStorage.getItem('theme');
			const theme = savedTheme || 'light';

			document.documentElement.setAttribute('data-theme', theme);
		}

		function toggleTheme() {
			const currentTheme = document.documentElement.getAttribute('data-theme');
			const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
		}

		// Initialize theme on page load
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', function() {
				initTheme();
				themeToggle?.addEventListener('click', toggleTheme);
			});
		} else {
			initTheme();
			themeToggle?.addEventListener('click', toggleTheme);
		}

		// Listen for system theme changes
		window
			.matchMedia('(prefers-color-scheme: dark)')
			.addEventListener('change', (e) => {
				if (!localStorage.getItem('theme')) {
					document.documentElement.setAttribute('data-theme', e.matches ? 'dark' : 'light');
				}
			});
	})();
</script>
